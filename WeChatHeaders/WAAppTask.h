//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

#import "MMTipsViewControllerDelegate-Protocol.h"
#import "WAAppDetailInfoManagerExtension-Protocol.h"
#import "WAAppTansitionControllerDelegate-Protocol.h"
#import "WAAppTaskLoaderDelegate-Protocol.h"
#import "WAAppTaskVersionFallBackExt-Protocol.h"
#import "WABackgroundFetchExt-Protocol.h"
#import "WABrandTitleBarDelegate-Protocol.h"
#import "WACapsuleMenuDelegate-Protocol.h"
#import "WAContactMgrExtension-Protocol.h"
#import "WAJSCoreServiceDelegate-Protocol.h"
#import "WAJavaScriptContextExtension-Protocol.h"
#import "WAMenuAnimatedTransitionProtocol-Protocol.h"
#import "WAMinimizeDelegate-Protocol.h"
#import "WAPackageUpdateExt-Protocol.h"
#import "WAPermissionHandlerDelegate-Protocol.h"
#import "WASkylineRuntimeDelegate-Protocol.h"
#import "WASplashADViewControllerDelegate-Protocol.h"
#import "WAUINavigationControllerDelegate-Protocol.h"
#import "WAWebViewDelegate-Protocol.h"
#import "WAWebViewPageMgrDelegate-Protocol.h"
#import "WCMainWindowExt-Protocol.h"

@class CustomVisualEffectView, MMTimer, NSCondition, NSDictionary, NSMutableArray, NSMutableDictionary, NSMutableSet, NSString, UIView, UIVisualEffectView, WAAppOpenParameter, WAAppTansitionController, WAAppTaskCapsuleMenu, WAAppTaskExtInfo, WAAppTaskHandlerWrapper, WAAppTaskLifeCycleRecord, WAAppTaskLoader, WAAppTaskReferrerInfo, WAAppTaskRunningStateEnterBackgroundContext, WAAppTaskShowFromBackgroundContext, WAAppTaskSplashADConfig, WAAppTaskSystemCoverView, WAApptaskPublicResLogic, WABrandTitleBar, WAColdLaunchPreFetchCGILogic, WAContact, WAFPSMonitor, WAIpadAdaptLogic, WAJSCoreService, WAPackageConfig, WAPerformanceIndexObject, WAPermissionHandler, WAPopOverTaskBarlogic, WAPopOverView, WAPreloadAppTask, WARemoteDebugger, WAThreadSafeMutableDictionary, WAUINavigationController, WAWebViewController, WAWebViewPageMgr, WMPFLaunchTipView, WxaExternalInfo;
@protocol IWASkylineRuntime, WAAppTaskDelegate;

@interface WAAppTask : NSObject <WASplashADViewControllerDelegate, WASkylineRuntimeDelegate, WAMenuAnimatedTransitionProtocol, WCMainWindowExt, WACapsuleMenuDelegate, WAUINavigationControllerDelegate, WABrandTitleBarDelegate, WAPackageUpdateExt, WAWebViewPageMgrDelegate, WAAppTansitionControllerDelegate, WAJavaScriptContextExtension, WAAppDetailInfoManagerExtension, WAAppTaskVersionFallBackExt, WAAppTaskLoaderDelegate, WAWebViewDelegate, WAJSCoreServiceDelegate, WAPermissionHandlerDelegate, MMTipsViewControllerDelegate, WAContactMgrExtension, WABackgroundFetchExt, WAMinimizeDelegate>
{
    _Bool _hasActivateMinimizeArea;
    _Bool _forceCancelMinimize;
    NSString *_appID;
    WAAppTaskReferrerInfo *_backToWeAppReferrerInfo;
    WAContact *_contact;
    WAPackageConfig *_packageConfig;
    NSString *_relativeURL;
    unsigned int _debugModeType;
    NSDictionary *_dicExtraInfo;
    WAAppTaskShowFromBackgroundContext *_showFromBackgroundContext;
    _Bool _isDebugAndVConsoleOpen;
    WxaExternalInfo *_wxaExternalInfo;
    WAWebViewController *_preloadWebView;
    WAWebViewController *_preloadSkyline;
    WAJSCoreService *_appService;
    WARemoteDebugger *_remoteDebugger;
    WAAppTaskReferrerInfo *_referrerInfo;
    _Bool _isSimulatedNativeWeApp;
    NSString *_lastLaunchNativcePageString;
    _Bool _isBackgroundOnLaunchNativePage;
    double _beginOpenTime;
    WAWebViewController *_curAppRouteWebView;
    WAWebViewController *_currentAppRouteDoneWebView;
    WAWebViewController *_currentSkylineRouteDoneWebview;
    _Bool _isPopParent;
    _Bool _isPopAllParent;
    _Bool _isEnableClose;
    _Bool _isWebViewAppear;
    _Bool _isAlreadyLaunchOpenURL;
    _Bool _isAlreadyLaunchAlertMsg;
    _Bool _isEnterforegroundReload;
    _Bool _isNeedCheckLaunchAction;
    unsigned int _webViewMaxDepth;
    unsigned int _actualWebviewDepth;
    unsigned int _backgroundTaskMaxTimeout;
    NSString *_refererHost;
    unsigned int _lifeSpanBeforeSuspend;
    unsigned int _lifeSpanAfterSuspend;
    _Bool _resetTaskWhenEnterForeground;
    _Bool _bIsNeedShowUserGuide;
    MMTimer *_suspendTimer;
    _Bool _isSuspendTimerWorking;
    unsigned long long _weixinAppPlatformState;
    unsigned long long _taskPlatformState;
    unsigned long long _runningState;
    struct shared_ptr<WxCronetGlobalCallback> m_wxCronetGlobalCallback;
    _Bool _isRecording;
    _Bool _isLivePushing;
    _Bool _isLivePlaying;
    _Bool _isMediaPlaying;
    NSMutableSet *_setLoadedModuleName;
    _Bool _isGameAppOrientationPortrait;
    NSMutableArray *_arrPrivacy;
    _Bool _bIsUpdatingPkg;
    _Bool _bIsNextLaunchNeedRelaunch;
    WAIpadAdaptLogic *_ipadAdaptLogic;
    _Bool _bShowMaskWindowAboveWebviewForIpad;
    long long _reportPerformanceInterval;
    WAFPSMonitor *_fpsMonitor;
    long long _initMemory;
    long long _initMemoryInFootprint;
    WAPerformanceIndexObject *_performanceIndexObject;
    unsigned long long _closeTimeStampInMs;
    _Bool _isTaskPreload;
    WAPreloadAppTask *_preloadAppTask;
    WAAppTaskCapsuleMenu *_capsuleMenu;
    WABrandTitleBar *_sheetModeBrandTitleBar;
    WABrandTitleBar *_embedModeHeaderBrandTitleBar;
    WAAppTaskSystemCoverView *_systemCoverView;
    WMPFLaunchTipView *_wmpfLaunchTipView;
    _Bool _isLoadingViewDidShow;
    _Bool _isTaskUseLazyLoad;
    UIVisualEffectView *_backgroundVisualEffectView;
    _Bool _sheetModeExpanded;
    _Bool _sheetModeFullScreen;
    unsigned long long _sheetModeContentState;
    _Bool _isSheetModeDragging;
    _Bool _isGameApp;
    _Bool _backgroundMusic;
    _Bool _firstRenderCompleted;
    _Bool _firstRenderFullCompleted;
    _Bool _shouldRoute13542To27220;
    _Bool _versionFallbackDying;
    _Bool _didAppearInForeground;
    _Bool _bgAudioMode;
    _Bool _bgVoipMode;
    _Bool _launchActionShouldUpdateInBackground;
    _Bool _updateReadyAfterContactUpdated;
    _Bool _updateInBackgroundTipsShowing;
    _Bool _clientNetworkInWeakNet;
    _Bool _weappCronetNetworkInWeakNet;
    _Bool _serverModeToggled;
    _Bool _hasBeenFullLaunched;
    _Bool _isSkylineValid;
    _Bool _isSkylineDefault;
    _Bool _canSwitchRender;
    _Bool _launchVcInited;
    unsigned int _timeEnterBackground;
    unsigned int _launchScene;
    unsigned int _enterScene;
    unsigned int _originScene;
    unsigned int _preloadType;
    unsigned int _networkStatusType;
    unsigned int _lastSceneWithout1038;
    id <WAAppTaskDelegate> delegate;
    WAApptaskPublicResLogic *_publicResLogic;
    WAUINavigationController *_weakNavigationController;
    NSString *_enterPath;
    WAAppTaskExtInfo *_taskExtInfo;
    WAAppOpenParameter *_taskOpenInfo;
    id <IWASkylineRuntime> _skylineRuntime;
    double _openTaskTime;
    NSString *_instanceId;
    unsigned long long _appLaunchTimeInMs;
    WAAppTansitionController *_appTransitionController;
    unsigned long long _currentMemoryLevel;
    NSMutableDictionary *_customUIWidgetDic;
    UIView *_embedModeBackgroundView;
    CustomVisualEffectView *_embedModeBackgroundBlurView;
    NSString *_presentedSheetWeAppTaskAppId;
    NSString *_tempRemainPresentedSheetWeAppTaskAppIdWhenCapsuleExit;
    WAColdLaunchPreFetchCGILogic *_coldLaunchPreFetchCGILogic;
    NSMutableDictionary *_dicLoadedPlugin;
    WAThreadSafeMutableDictionary *_serviceRouteCgiMap;
    WAAppTaskLifeCycleRecord *_lifeCycleRecord;
    NSMutableSet *_downloadedPluginAppid;
    WAAppTaskLoader *_childPageAppLoader;
    WAAppTaskLoader *_forceReloadAppLoader;
    WAAppTaskLoader *_relaunchAppLoader;
    NSMutableArray *_arrAppServiceCacheEventData;
    WAPopOverTaskBarlogic *_popOverLogic;
    WAPopOverView *_popOverView;
    WAAppOpenParameter *_fullLaunchOpenParameter;
    WAAppTaskExtInfo *_fullLaunchTaskExtInfo;
    WAAppTaskLoader *_appLoader;
    WAAppTaskHandlerWrapper *_handlerWrapper;
    WAPermissionHandler *_permissionHandler;
    WAAppTaskRunningStateEnterBackgroundContext *_enterBackgroundContext;
    WAWebViewPageMgr *_pageMgr;
    NSCondition *_launchVcCondition;
    NSMutableArray *_opConfigList;
}

+ (id)permissionLaunchParamenterFromTaskExtInfo:(id)arg1 openInfo:(id)arg2;
+ (id)convertADSceneToString:(unsigned long long)arg1;
+ (_Bool)splashAD_verifyEnterScene:(unsigned int)arg1;
+ (_Bool)splashAD_isDarkMode;
+ (id)rootPresentingViewControllerWithViewController:(id)arg1;
+ (id)appIDListFromViewController:(id)arg1;
+ (id)appIdWithWeAppNavigationController:(id)arg1;
- (id).cxx_construct;
- (void).cxx_destruct;
@property(retain, nonatomic) NSMutableArray *opConfigList; // @synthesize opConfigList=_opConfigList;
@property(nonatomic) _Bool launchVcInited; // @synthesize launchVcInited=_launchVcInited;
@property(retain, nonatomic) NSCondition *launchVcCondition; // @synthesize launchVcCondition=_launchVcCondition;
@property(nonatomic) _Bool canSwitchRender; // @synthesize canSwitchRender=_canSwitchRender;
@property(nonatomic) _Bool isSkylineDefault; // @synthesize isSkylineDefault=_isSkylineDefault;
@property(nonatomic) _Bool isSkylineValid; // @synthesize isSkylineValid=_isSkylineValid;
@property(retain, nonatomic) WAWebViewPageMgr *pageMgr; // @synthesize pageMgr=_pageMgr;
@property(retain) WAAppTaskRunningStateEnterBackgroundContext *enterBackgroundContext; // @synthesize enterBackgroundContext=_enterBackgroundContext;
@property(retain) WAPermissionHandler *permissionHandler; // @synthesize permissionHandler=_permissionHandler;
@property(retain, nonatomic) WAAppTaskHandlerWrapper *handlerWrapper; // @synthesize handlerWrapper=_handlerWrapper;
@property(retain, nonatomic) WAAppTaskLoader *appLoader; // @synthesize appLoader=_appLoader;
@property(retain, nonatomic) WAAppTaskExtInfo *fullLaunchTaskExtInfo; // @synthesize fullLaunchTaskExtInfo=_fullLaunchTaskExtInfo;
@property(retain, nonatomic) WAAppOpenParameter *fullLaunchOpenParameter; // @synthesize fullLaunchOpenParameter=_fullLaunchOpenParameter;
@property(retain, nonatomic) WAPopOverView *popOverView; // @synthesize popOverView=_popOverView;
@property(retain, nonatomic) WAPopOverTaskBarlogic *popOverLogic; // @synthesize popOverLogic=_popOverLogic;
@property(readonly, nonatomic) unsigned int lastSceneWithout1038; // @synthesize lastSceneWithout1038=_lastSceneWithout1038;
@property(retain, nonatomic) NSMutableArray *arrAppServiceCacheEventData; // @synthesize arrAppServiceCacheEventData=_arrAppServiceCacheEventData;
@property(retain, nonatomic) WAAppTaskLoader *relaunchAppLoader; // @synthesize relaunchAppLoader=_relaunchAppLoader;
@property(retain, nonatomic) WAAppTaskLoader *forceReloadAppLoader; // @synthesize forceReloadAppLoader=_forceReloadAppLoader;
@property(retain, nonatomic) WAAppTaskLoader *childPageAppLoader; // @synthesize childPageAppLoader=_childPageAppLoader;
@property(retain, nonatomic) NSMutableSet *downloadedPluginAppid; // @synthesize downloadedPluginAppid=_downloadedPluginAppid;
@property(nonatomic) _Bool hasBeenFullLaunched; // @synthesize hasBeenFullLaunched=_hasBeenFullLaunched;
@property(retain, nonatomic) WAAppTaskLifeCycleRecord *lifeCycleRecord; // @synthesize lifeCycleRecord=_lifeCycleRecord;
@property(retain, nonatomic) WAThreadSafeMutableDictionary *serviceRouteCgiMap; // @synthesize serviceRouteCgiMap=_serviceRouteCgiMap;
@property(nonatomic) _Bool serverModeToggled; // @synthesize serverModeToggled=_serverModeToggled;
@property(nonatomic) _Bool weappCronetNetworkInWeakNet; // @synthesize weappCronetNetworkInWeakNet=_weappCronetNetworkInWeakNet;
@property(nonatomic) _Bool clientNetworkInWeakNet; // @synthesize clientNetworkInWeakNet=_clientNetworkInWeakNet;
@property(nonatomic) unsigned int networkStatusType; // @synthesize networkStatusType=_networkStatusType;
@property(retain, nonatomic) NSMutableDictionary *dicLoadedPlugin; // @synthesize dicLoadedPlugin=_dicLoadedPlugin;
@property(retain, nonatomic) WAColdLaunchPreFetchCGILogic *coldLaunchPreFetchCGILogic; // @synthesize coldLaunchPreFetchCGILogic=_coldLaunchPreFetchCGILogic;
@property(nonatomic) _Bool updateInBackgroundTipsShowing; // @synthesize updateInBackgroundTipsShowing=_updateInBackgroundTipsShowing;
@property(nonatomic) _Bool updateReadyAfterContactUpdated; // @synthesize updateReadyAfterContactUpdated=_updateReadyAfterContactUpdated;
@property(nonatomic) _Bool launchActionShouldUpdateInBackground; // @synthesize launchActionShouldUpdateInBackground=_launchActionShouldUpdateInBackground;
@property(copy, nonatomic) NSString *tempRemainPresentedSheetWeAppTaskAppIdWhenCapsuleExit; // @synthesize tempRemainPresentedSheetWeAppTaskAppIdWhenCapsuleExit=_tempRemainPresentedSheetWeAppTaskAppIdWhenCapsuleExit;
@property(copy, nonatomic) NSString *presentedSheetWeAppTaskAppId; // @synthesize presentedSheetWeAppTaskAppId=_presentedSheetWeAppTaskAppId;
@property(retain, nonatomic) CustomVisualEffectView *embedModeBackgroundBlurView; // @synthesize embedModeBackgroundBlurView=_embedModeBackgroundBlurView;
@property(retain, nonatomic) UIView *embedModeBackgroundView; // @synthesize embedModeBackgroundView=_embedModeBackgroundView;
@property(retain, nonatomic) NSMutableDictionary *customUIWidgetDic; // @synthesize customUIWidgetDic=_customUIWidgetDic;
@property(nonatomic) _Bool bgVoipMode; // @synthesize bgVoipMode=_bgVoipMode;
@property(nonatomic) _Bool bgAudioMode; // @synthesize bgAudioMode=_bgAudioMode;
@property(nonatomic) _Bool didAppearInForeground; // @synthesize didAppearInForeground=_didAppearInForeground;
@property(nonatomic) _Bool versionFallbackDying; // @synthesize versionFallbackDying=_versionFallbackDying;
@property(nonatomic) unsigned int preloadType; // @synthesize preloadType=_preloadType;
@property(nonatomic) unsigned long long currentMemoryLevel; // @synthesize currentMemoryLevel=_currentMemoryLevel;
@property(nonatomic) _Bool shouldRoute13542To27220; // @synthesize shouldRoute13542To27220=_shouldRoute13542To27220;
@property(retain, nonatomic) WAAppTansitionController *appTransitionController; // @synthesize appTransitionController=_appTransitionController;
@property(nonatomic) _Bool firstRenderFullCompleted; // @synthesize firstRenderFullCompleted=_firstRenderFullCompleted;
@property(nonatomic) _Bool firstRenderCompleted; // @synthesize firstRenderCompleted=_firstRenderCompleted;
@property(nonatomic) unsigned long long appLaunchTimeInMs; // @synthesize appLaunchTimeInMs=_appLaunchTimeInMs;
@property(retain, nonatomic) NSString *instanceId; // @synthesize instanceId=_instanceId;
@property(nonatomic) double openTaskTime; // @synthesize openTaskTime=_openTaskTime;
@property(retain, nonatomic) id <IWASkylineRuntime> skylineRuntime; // @synthesize skylineRuntime=_skylineRuntime;
@property(readonly, nonatomic) WAJSCoreService *appService; // @synthesize appService=_appService;
@property(retain, nonatomic) WAAppOpenParameter *taskOpenInfo; // @synthesize taskOpenInfo=_taskOpenInfo;
@property(retain, nonatomic) WAAppTaskExtInfo *taskExtInfo; // @synthesize taskExtInfo=_taskExtInfo;
@property(retain, nonatomic) NSString *enterPath; // @synthesize enterPath=_enterPath;
@property(nonatomic) unsigned int originScene; // @synthesize originScene=_originScene;
@property(readonly, nonatomic) unsigned int enterScene; // @synthesize enterScene=_enterScene;
@property(nonatomic) unsigned int launchScene; // @synthesize launchScene=_launchScene;
@property(nonatomic) _Bool backgroundMusic; // @synthesize backgroundMusic=_backgroundMusic;
@property(nonatomic) unsigned int timeEnterBackground; // @synthesize timeEnterBackground=_timeEnterBackground;
@property(nonatomic) _Bool isGameApp; // @synthesize isGameApp=_isGameApp;
@property(nonatomic) __weak WAUINavigationController *weakNavigationController; // @synthesize weakNavigationController=_weakNavigationController;
@property(retain, nonatomic) WAApptaskPublicResLogic *publicResLogic; // @synthesize publicResLogic=_publicResLogic;
@property(nonatomic) __weak id <WAAppTaskDelegate> delegate; // @synthesize delegate;
- (int)wmpfHostScene;
- (void)onFinishQuickReplyMsg;
- (void)onBeginQuickReplyMsg;
- (void)onTaskVersionFallBackTickWithUsername:(id)arg1 appid:(id)arg2;
- (id)getNativeInputAccessoryView;
- (unsigned long long)permissionToShowCopyMpLink;
- (unsigned long long)permissionToShowShareToFriend;
- (unsigned long long)permissionToShowShareWework;
- (id)getSystemCoverView;
- (id)getCapsuleMenu;
- (struct CGRect)getCapsuleMenuFrameRelativeToView:(id)arg1;
- (id)ipadCompatibleModeBottomViewBackgroundColorForNavigationController:(id)arg1;
- (void)navigationController:(id)arg1 navigationViewDidDisappear:(_Bool)arg2;
- (void)navigationController:(id)arg1 navigationViewWillAppear:(_Bool)arg2;
- (_Bool)navigationController:(id)arg1 shouldUsePresentWhenPushViewController:(id)arg2 animated:(_Bool)arg3 scene:(unsigned long long)arg4;
- (_Bool)navigationControllerShouldForceLightMode:(id)arg1;
- (void)navigationController:(id)arg1 didShowViewController:(id)arg2 animated:(_Bool)arg3;
- (void)navigationController:(id)arg1 willShowViewController:(id)arg2 animated:(_Bool)arg3;
- (_Bool)systemCoverViewShouldHideForViewController:(id)arg1;
- (void)updateSystemCoverViewHiddenForViewController:(id)arg1 fromWillShow:(_Bool)arg2;
- (void)updateSystemCoverViewForViewController:(id)arg1 fromWillShow:(_Bool)arg2;
- (void)updateCapsuleMenuForViewController:(id)arg1;
- (void)updateCapsuleMenuStyleForViewController:(id)arg1;
- (void)updateCapsuleMenuFrameForViewController:(id)arg1;
- (_Bool)capsuleMenuShouldHideForViewController:(id)arg1;
- (void)updateCapsuleMenuHiddenForViewController:(id)arg1;
- (void)onMenuLongPressExit;
- (void)onMenuLongPressMore;
- (void)cancelAllTaskLoaderIfHaveWithMessage:(id)arg1;
- (void)onMenuExit:(long long)arg1;
- (void)onMenuMore;
- (double)statusBarHeightInCurrentLaunchMode;
- (long long)getRunDuration;
- (void)mm_traitCollectionDidChange:(id)arg1;
- (unsigned long long)silentOpenType;
- (_Bool)isSilentOpenOnlyService;
- (_Bool)shouldShowTemplateNav;
- (unsigned long long)templateNavShowTypeInSheetMode;
- (void)restartAppTaskWithMode:(unsigned long long)arg1 pagePath:(id)arg2 referrerInfo:(id)arg3 scene:(unsigned int)arg4 sceneNote:(id)arg5;
- (_Bool)hasWebViewId:(unsigned long long)arg1;
- (_Bool)isSilentOpen;
- (_Bool)isNativeWeApp;
- (_Bool)webview:(id)arg1 isModuleLoaded:(id)arg2;
- (_Bool)isLoadingTaskForSilentOpen;
- (_Bool)taskUseLazyLoad;
- (_Bool)isTaskUsePreload;
- (id)foregroundPage;
- (id)backgroundPages;
- (unsigned int)stackPagesCount;
- (unsigned int)allPagesCount;
- (unsigned int)healthyPagesCount;
- (unsigned int)manuallyTerminatedPagesCount;
- (unsigned int)contentProcessTerminatedPagesCount;
- (id)pagesStatusDescription;
- (id)getUpdateMangerStateStr:(unsigned long long)arg1;
- (void)sendUpdateManagerEventPluginStatusChangeWithPluginAppid:(id)arg1 state:(unsigned long long)arg2 pluginVersion:(unsigned int)arg3 customVersion:(id)arg4;
- (void)sendUpdateManagerEventStatusChangeWithState:(unsigned long long)arg1 appVersion:(unsigned int)arg2 customVersion:(id)arg3 contactPassThroughInfo:(id)arg4 stablePassThroughInfo:(id)arg5;
- (void)onUpdateWeAppPackage:(id)arg1 updateResult:(_Bool)arg2;
- (void)onUpdateWeAppPackageStartDownload:(id)arg1;
- (void)onUpdateWeAppPackageNoNeedUpdate:(id)arg1;
- (void)onAppAuthInfoListModifyEnd:(_Bool)arg1 AuthDataList:(id)arg2;
- (void)onModAppAuthInfoListWithAppid:(id)arg1 errorCode:(int)arg2;
- (void)postWXNativeBizDataFromNativeToJSWithParam:(id)arg1;
- (void)callbackWXNativeBizDataPipeFromJSToNaviteWithParam:(id)arg1;
- (void)navigateToTargetMiniProgramWillBeDismissed;
- (void)sendBizCompleteWithParam:(id)arg1;
- (void)reportPerformanceInfo;
- (void)initPerformanceReport;
- (void)stopMonitorFPS;
- (void)startMonitorFPS;
- (void)onBackgroundFetchDataReturn:(id)arg1 FetchType:(id)arg2 FetchData:(id)arg3 FetchRequestParam:(id)arg4;
- (void)sheetContentDidHide;
- (void)sheetContentWillHide;
- (void)callHandlerWrapperNavigationLifeCycleEventIfNeededWithType:(unsigned long long)arg1;
- (void)sheetContentDidReturnToNormalAfterExpand;
- (void)sheetContentDidShow;
- (void)sheetContentWillShow;
- (void)sheetDismissalTransitionDidEnd:(_Bool)arg1;
- (void)sheetDismissalTransitionWillBegin;
- (void)sheetPresentationTransitionDidEnd:(_Bool)arg1;
- (void)sheetPresentationTransitionWillBegin;
- (void)willKillSheetWeAppTask:(id)arg1;
- (void)didDismissSheetWeAppTask:(id)arg1;
- (void)willDismissSheetWeAppTask:(id)arg1;
- (void)didPresentSheetWeAppTask:(id)arg1;
- (void)animateShowEmbedModeBackgroundView;
- (void)willPresentSheetWeAppTask:(id)arg1;
- (void)callJumpFromTaskWillKillSheetWeAppTaskIfNeeded;
- (void)callJumpFromTaskDidDismissSheetWeAppTaskIfNeeded;
- (void)callJumpFromTaskWillDismissSheetWeAppTaskIfNeeded;
- (void)callJumpFromTaskDidPresentSheetWeAppTaskIfNeeded;
- (void)callJumpFromTaskWillPresentSheetWeAppTaskIfNeeded;
- (id)getJumpingEmbedWeAppTask;
- (id)getJumpFromAppTask;
- (_Bool)sheetCanRecoverAfterExpand;
- (_Bool)sheetShouldForbidDragDownGestureAfterExpand;
- (_Bool)sheetShouldUseDraggingBarHeaderView;
- (id)sheetHeaderViewInSheetLaunchMode;
- (_Bool)sheetBackgroundUserInteractionEnabledInSheetLaunchMode;
- (id)sheetBackgroundColorInSheetLaunchMode;
- (void)sheetDragGestureInSheetLaunchModeDidEnd:(id)arg1;
- (void)sheetDragGestureInSheetLaunchModeDidBegin:(id)arg1;
- (void)sheetContentYDidChangeInSheetLaunchMode:(double)arg1;
- (_Bool)sheetCanDragToExpandInSheetLaunchMode;
- (_Bool)sheetShouldRespondsToTapGestureInSheetLaunchMode:(id)arg1;
- (_Bool)sheetShouldForbidDragUpGestureInSheetLaunchMode:(id)arg1;
- (_Bool)sheetShouldRespondsToDragGestureInSheetLaunchMode:(id)arg1;
- (unsigned long long)dismissType;
- (double)sheetCornerRadiusInSheetLaunchMode;
- (unsigned long long)sheetRectCornerInSheetLaunchMode;
- (struct CGSize)landscapeSheetSizeInSheetLaunchMode;
- (double)sheetExpandedHeightInSheetLaunchMode;
- (void)sheetFrameDidChange:(struct CGRect)arg1;
- (struct CGSize)sheetSizeInSheetLaunchMode;
- (void)onTapPresentationControllerContainerBackground;
- (void)onPresentationControllerDragToNormalAfterExpand;
- (void)onPresentationControllerDragToExpand:(_Bool)arg1;
- (void)onPresentationControllerWillDragToExpand:(_Bool)arg1;
- (void)onPresentationControllerDragToDismiss;
- (_Bool)dismissControllerNeedMask;
- (_Bool)dismissControllerNeedZoom;
- (_Bool)presentationControllerNeedMask;
- (_Bool)presentationControllerNeedZoom;
- (id)currentTaskWebView;
- (id)currentTaskFirstWebView;
- (id)getFileData:(id)arg1;
- (void)sendPageTerminatedBySystemEventWithWebView:(id)arg1;
- (void)sendMemoryWarningEvent;
- (void)forceRelaunchWithContact:(id)arg1;
- (void)actionAfterAsyncUpdateContactCallBackType:(unsigned long long)arg1 withContact:(id)arg2;
- (void)onModifyWeAppContact:(id)arg1;
- (void)onUpdateWeAppContactSuccess:(id)arg1;
- (void)onUpdateWeAppContactFailedWithKey:(id)arg1 type:(unsigned long long)arg2 errMsg:(id)arg3;
- (void)sendJSStringEventWhenServiceWasReady:(id)arg1 param:(id)arg2 webviewID:(unsigned long long)arg3;
- (void)sendJSEventWhenServiceWasReady:(long long)arg1 param:(id)arg2 webviewID:(unsigned long long)arg3;
- (void)onJSInjected:(id)arg1;
- (void)tryLoadConfigForPlugin:(id)arg1;
- (unsigned int)getInnerVersionFromLoadedPluginInfoDataForPluginAppid:(id)arg1;
- (unsigned int)getPluginInnerVersionFromContactForPluginAppid:(id)arg1;
- (unsigned int)getInnerVersionForLoadedPluginAppid:(id)arg1;
- (void)webView:(id)arg1 pageRouteDownloadedInfoDatas:(id)arg2;
- (void)addLoadedPlugin:(id)arg1;
- (void)checkCacheReadyForRelativeURL:(id)arg1 entryPackages:(id)arg2 syncType:(int)arg3 inScene:(unsigned long long)arg4 completeHandler:(CDUnknownBlockType)arg5 progressHandler:(CDUnknownBlockType)arg6;
- (_Bool)createLoadSubPackageTask:(id)arg1 completeHandler:(CDUnknownBlockType)arg2 progressHandler:(CDUnknownBlockType)arg3;
- (_Bool)isModuleNameValid:(id)arg1;
- (void)injectEntryPackagesIfNeeded;
- (_Bool)isPluginDownloaedWithAppId:(id)arg1;
- (void)addDownloadedPluginAppid:(id)arg1;
- (_Bool)isModuleLoadedWithName:(id)arg1;
- (void)addLoadedModuleName:(id)arg1;
- (void)redirectToRelativePath:(id)arg1 extraInfo:(id)arg2 fromWebView:(id)arg3 completeHandler:(CDUnknownBlockType)arg4;
- (_Bool)isWxAudioPlaying;
- (_Bool)isInnerAudioPlaying;
- (_Bool)isWeAppWindowResizableForIpad;
- (_Bool)canKeepAliveByBackgroundResourceForReleaseMode:(id)arg1;
- (_Bool)canKeepAliveByBackgroundResourceForDebugMode:(id)arg1;
- (_Bool)shouldMinimizeCurTaskByBackgroundResource;
- (_Bool)hasBackgroundSharedResourceActivity;
- (void)stopAllBackgroundSharedResourceActivity;
- (id)chattingVoipMinimizationItemInfo;
- (id)minimizationHost;
- (void)hideVoipChattingMinimizationWindowIfNeeded;
- (void)showVoipChattingMinimizationWindowIfNeeded;
- (void)onSystemScreenCapturedChanged:(id)arg1;
- (long long)privacyMenuState;
- (_Bool)jumpingEmbedWeAppTaskIsStating;
- (void)refreshJumpFromAppTaskCapsuleMenuStateIfNeeded;
- (void)refreshCapsuleMenuState;
- (void)unregisterPrivacy:(unsigned long long)arg1;
- (void)registerPrivacy:(unsigned long long)arg1;
- (void)onSystemPrivacyRecordChanged;
- (void)onSystemPrivacyLocationBackgroundChanged;
- (void)onSystemPrivacyLocationChanged;
- (_Bool)isAppMediaPlaying;
- (void)setAppMediaPlaying:(_Bool)arg1;
- (_Bool)isLivePlaying;
- (void)setLivePlayingState:(_Bool)arg1;
- (_Bool)isLivePushing;
- (void)setLivePusherState:(_Bool)arg1;
- (_Bool)isRecording;
- (void)setRecordState:(_Bool)arg1;
- (void)taskDidKickedOutVoip;
- (_Bool)isVoIPChattingMute;
- (_Bool)isVoIPChatting;
- (void)taskDidKickedOutMusicPlayerByOtherSource:(id)arg1;
- (_Bool)canKeepAliveByAudioPlayForReleaseMode;
- (_Bool)canKeeyAliveByAudioPlayForAllDebugMode;
- (_Bool)canKeepAliveByAudioPlay;
- (id)permisstionDescriptionForScope:(id)arg1;
- (_Bool)canContinueShowLocationConfirmView;
- (void)taskDidResignSharedBackgroundResouce:(unsigned long long)arg1;
- (void)onNetworkStatusChange:(unsigned int)arg1;
- (void)markEnterBackgroundOnLaunchNativePage:(id)arg1 isWebPage:(_Bool)arg2;
- (void)reportEnterForegroundIfBackFromNativePage;
- (void)reportEnterForeground;
- (void)processWillTriggerSuspendTimer;
- (void)updateStorage;
- (void)triggerSuspendTimer:(id)arg1;
- (void)invalidateSuspendStatusTimer;
- (void)scheduleSuspendStatusTimer;
- (void)onClickTipsBtn:(id)arg1 Index:(long long)arg2 tipTag:(long long)arg3;
- (void)showTipsViewWithTitle:(id)arg1 content:(id)arg2 confirmBtnTitle:(id)arg3 tipsTag:(long long)arg4 delegate:(id)arg5;
- (void)prefetchDNSDomainIfNeeded;
- (void)getColdLaunchPreFetchCGIDataWithFetchType:(unsigned int)arg1 completion:(CDUnknownBlockType)arg2;
- (void)doColdLaunchPreFetchCGIData;
- (void)closeTaskAndAlertMsg:(id)arg1 title:(id)arg2 confirmBtnTitle:(id)arg3;
- (void)closeTaskAndJumpToURL:(id)arg1;
- (void)checkPluginPermission;
- (void)checkOpConfig;
- (void)checkBackgroundUpdateLaunchAction;
- (void)checkLaunchAction;
- (_Bool)shouldUpdateInHistoryList;
- (id)currentLaunchAction;
- (id)getExtraInfo:(id)arg1 remove:(_Bool)arg2;
- (void)addExtraInfo:(id)arg1 forKey:(id)arg2;
- (id)getGameExtraInfo;
- (id)getAllPermissionStatesDescriptionForAllRunningState;
- (id)getPermissionStateDescriptionInAllRunningStateForIndex:(unsigned int)arg1;
- (void)notifyServiceEventOnLaunchPermissionUpdate;
- (void)onPluginPermissionInfoUpdate;
- (void)onLaunchPermissionInfoUpdate;
- (void)onUserTransferAuthDidCompeleteWithJSAPIName:(id)arg1 transferHandler:(CDUnknownBlockType)arg2 result:(id)arg3 scene:(unsigned long long)arg4;
- (void)onUserAuthFailWithJSAPI:(id)arg1 failHandler:(CDUnknownBlockType)arg2 errMsg:(id)arg3 errNo:(unsigned int)arg4 scene:(unsigned long long)arg5;
- (void)onUserAuthOKWithJSAPI:(id)arg1 handler:(CDUnknownBlockType)arg2 scene:(unsigned long long)arg3;
- (void)onServiceRouteCgiResponseData:(id)arg1 eventId:(unsigned int)arg2 support:(_Bool)arg3;
- (void)sendCgiToService:(id)arg1 eventId:(unsigned int)arg2 completion:(CDUnknownBlockType)arg3;
- (_Bool)isInServiceServerMode;
- (id)getDnsArrayFromLocal:(id)arg1;
- (void)serviceDidAppendRuntimeContext:(id)arg1;
- (void)detectServiceServerMode;
- (void)onClientNetworkWeakChanged:(_Bool)arg1;
- (void)NotifyWeakOrGoodNet:(_Bool)arg1;
- (void)onSystemInfoReachabilityChanged:(unsigned int)arg1 networkType:(id)arg2 isReachable:(_Bool)arg3;
- (_Bool)DoDnsResolve:(const void *)arg1 result:(void *)arg2;
- (void)setCronetGloableCallBack;
- (void)releaseCronetGlobalCallback;
- (void)printConsoleLog:(id)arg1;
- (id)GetWeAppPluginByName:(id)arg1;
- (void)resetTask:(_Bool)arg1;
- (void)registerLeakDetector:(unsigned long long)arg1;
- (void)onTaskDidBeClosed:(unsigned long long)arg1;
- (void)onTaskWillBeClosed:(unsigned long long)arg1;
- (void)closeTaskWithReason:(unsigned long long)arg1;
- (void)closeTask;
- (_Bool)isGameFunctionalPage;
- (_Bool)isRestrictedBySecurityFlag;
- (unsigned int)getSecFlagForSinglePageMode;
- (_Bool)isUsingSinglePageMode;
- (_Bool)isTaskRunning;
- (void)onTaskWillEnterForeground;
- (void)onTaskDidEnterForeground;
- (void)onTaskDidEnterBackgroundWithReason:(unsigned long long)arg1;
- (void)onTaskWillEnterBackground;
- (id)notificationUserInfo;
- (unsigned long long)getEnterBackgroundReasonByEvent:(id)arg1;
- (void)onTaskRunningStateDidChangeTo:(unsigned long long)arg1 byEvent:(id)arg2;
- (void)onTaskRunningStateWillChangeTo:(unsigned long long)arg1 byEvent:(id)arg2;
- (unsigned long long)getTaskRunningStatus;
- (_Bool)checkAndScheduleSuspendTimerIfNeeded;
- (void)updateRunningState:(unsigned long long)arg1 byEvent:(id)arg2;
- (void)suspendReceiveEvent:(id)arg1;
- (void)backgroundReceiveEvent:(id)arg1;
- (void)foregroundReceiveEvent:(id)arg1;
- (void)initStateReceiveEvent:(id)arg1;
- (void)notifyEvent:(id)arg1;
- (id)genSharedResourceRecoverEventWithType:(unsigned long long)arg1;
- (id)genUniqueResourceTakeOverEventWithType:(unsigned long long)arg1;
- (id)genCloseTaskEventWithReason:(unsigned long long)arg1;
- (id)genBackgroundCheckEvent;
- (id)genSuspendTimerEvent;
- (id)genStateChangedEventWithPlatformType:(unsigned long long)arg1 direction:(unsigned long long)arg2 reason:(unsigned int)arg3;
- (id)genSilentOpenServiceEvent;
- (void)silentOpenServiceTriggerEnterBackground;
- (void)setTaskPlatformState:(unsigned long long)arg1 reason:(unsigned int)arg2;
- (void)setWeixinAppPlatformState:(unsigned long long)arg1 reason:(unsigned int)arg2;
- (void)enterForegroundIfNeed;
- (_Bool)shouldEnterForeground;
- (_Bool)shouldSendEnterForegroundEventToServiceWhenHotLaunch;
- (_Bool)isFirstWebViewOnForeground;
- (void)enterBackgroundOnJumpOtherWeApp:(id)arg1;
- (void)enterBackgroundOnOpenH5Page:(id)arg1;
- (void)enterBackgroundOnOpenNativePage:(id)arg1;
- (void)checkForegound;
- (_Bool)getIsForeground;
- (void)taskEnterBackground:(long long)arg1 action:(long long)arg2;
- (void)taskEnterBackground:(long long)arg1;
- (void)taskEnterForeground:(long long)arg1;
- (void)onSystemEnterForeground:(id)arg1;
- (void)onSystemEnterBackground:(id)arg1;
- (void)onSystemWillResignActive:(id)arg1;
- (void)genBackgroundVisualEffectIfNeeded;
- (void)removeBackgroundVisualEffectView;
- (void)initBackgroundVisualEffectViewIfNeeded;
- (void)mainThreadTriggerStrictBanMode:(id)arg1;
- (void)triggerStrictBanMode:(id)arg1;
- (id)currentAppearance;
- (id)getServerModeInfo;
- (unsigned long long)currentLaunchMode;
- (void)service:(id)arg1 didFailEvaluateJS:(id)arg2 withError:(id)arg3;
- (void)checkUserAuthWithJSAPI:(id)arg1 permissionAppID:(id)arg2 model:(id)arg3 handler:(CDUnknownBlockType)arg4 failHandler:(CDUnknownBlockType)arg5 transferHandler:(CDUnknownBlockType)arg6 fromAppService:(id)arg7;
- (unsigned int)getPreloadType;
- (id)getPermissionDict;
- (id)getPermissionResultWithJSAPI:(id)arg1 fromAppService:(id)arg2 withAppId:(id)arg3 byTempPermission:(id)arg4;
- (void)layoutWmpfLaunchView;
- (void)layoutCapsuleMenu;
- (id)getPermissionResultWithJSAPI:(id)arg1 withAppId:(id)arg2 byTempPermission:(id)arg3;
- (void)setAppServiceCurrentWebView:(id)arg1;
- (void)appServiceSendOnEnterBackground:(long long)arg1;
- (void)appServiceSendOnEnterForeground:(id)arg1 isFromSystemAwake:(_Bool)arg2;
- (id)getStrForOpenType:(unsigned long long)arg1 webviewID:(unsigned long long)arg2;
- (void)logAppRoutePerformance:(long long)arg1 time:(unsigned int)arg2;
- (_Bool)reportPerformance;
- (void)logAppRouteAction:(unsigned long long)arg1 webviewID:(unsigned long long)arg2;
- (void)fillQualityDataInAppRouteParams:(id)arg1 forPage:(id)arg2;
- (void)sendOnAppRouteDoneWithWebView:(id)arg1;
- (void)sendSkylineRouteDoneWithWebview:(id)arg1;
- (void)sendAppRouteEventFromWebView:(id)arg1 openType:(unsigned long long)arg2;
- (void)detectWhiteScreenForWebView:(id)arg1 scene:(unsigned long long)arg2 withCompletion:(CDUnknownBlockType)arg3;
- (void)detectInitReadyWhiteScreenDurationForWebViewId:(id)arg1;
- (void)detectInitReadyWhiteScreenAndReportForWebviewId:(id)arg1;
- (void)detectAppRouteWhiteScreenAndReportForWebviewId:(id)arg1;
- (void)didSendOnAppRouteEventForWebView:(id)arg1 param:(id)arg2;
- (void)willSendOnAppRouteEventForWebView:(id)arg1 openType:(unsigned long long)arg2 param:(id)arg3;
- (void)setupAppServiceWithContact:(id)arg1 extraInfo:(id)arg2 preloadedAppService:(id)arg3;
- (void)clearAppService:(_Bool)arg1;
- (id)getNavAlertTitleForWebview:(id)arg1;
- (unsigned long long)supportedInterfaceOrientationInSheetMode;
- (long long)currentPrivacyMenuStateForWebView:(id)arg1;
- (unsigned long long)capsuleMenuType;
- (_Bool)controlByteMenuItemShouldBanInEmbedMode:(unsigned long long)arg1;
- (unsigned int)getControlByteWithMenuItem:(unsigned long long)arg1;
- (_Bool)canSelectControlByteMenuItem:(unsigned long long)arg1;
- (_Bool)canShowControlByteMenuItem:(unsigned long long)arg1;
- (_Bool)isSimulatedNativeSheetModeShouldHideLeftReturnButton;
- (_Bool)isSheetModeAlreadyDragToFullScreen;
- (_Bool)isSheetModeAlreadyDragToExpanded;
- (_Bool)isSheetModeDragGestureDragging;
- (_Bool)isForbidSheetModeFullScreenDragUpGesture;
- (_Bool)isEnableSheetModeFullScreenGesture;
- (_Bool)shouldAddPopBackInteractivePopGestureForWebView:(id)arg1;
- (void)jumpingEmbedWeAppTaskInteractivePopBackDidEnd:(_Bool)arg1;
- (void)jumpingEmbedWeAppTaskInteractivePopBackWillEnd:(_Bool)arg1;
- (void)jumpingEmbedWeAppTaskInteractivePopBackProgressing:(double)arg1;
- (void)jumpingEmbedWeAppTaskInteractivePopBackDidBegin;
- (void)destroyJumpingEmbedRelation;
- (id)jumpFromWeAppTaskAppid;
- (id)jumpingSheetWeAppTaskAppid;
- (_Bool)hasJumpingEmbedWeAppTask;
- (_Bool)isRunningInEmbedMode;
- (_Bool)isRunningInTransparentBackgroud;
- (_Bool)isRunningInKeepContextView;
- (_Bool)isRunningInSheetMode;
- (void)webView:(id)arg1 didReceiveInitReady:(_Bool)arg2;
- (void)webview:(id)arg1 didFailEvaluateJS:(id)arg2 withError:(id)arg3;
- (void)webviewDidShow404ErrorView:(id)arg1;
- (void)remoteNetworkRequest:(id)arg1 taskID:(id)arg2 header:(id)arg3;
- (void)remoteDomEvent:(id)arg1 webViewID:(unsigned int)arg2;
- (_Bool)isIgnoreRemoteCheckDomain;
- (_Bool)isRemoteDebugMode;
- (void)routeToPagePathWhenInForground:(id)arg1;
- (void)triggerTaskRouteToHomePage:(id)arg1;
- (void)reboot;
- (void)routeToHomePageWhenWebViewDidAppearWithNewSessionInfo:(id)arg1;
- (void)webViewInjectScriptFail:(id)arg1;
- (void)webViewOnPageReload:(id)arg1 withRouteInfo:(id)arg2;
- (void)reloadTerminatedWebViewIfNeeded;
- (void)webViewDidTerminateInContentProcess:(id)arg1;
- (_Bool)isWebViewOnDisplaying:(id)arg1;
- (_Bool)isPreloadCacheWebview:(id)arg1;
- (void)reportWKWebViewTerminateAction:(id)arg1 type:(unsigned long long)arg2;
- (void)webviewApiResult:(id)arg1;
- (void)sendJSEventToWorker:(id)arg1 param:(id)arg2 workerId:(unsigned int)arg3;
- (void)sendJSEventToService:(id)arg1 param:(id)arg2 fromWebView:(id)arg3;
- (void)returnSyncPostMessage:(id)arg1 fromWebView:(id)arg2;
- (void)publishPostMessage:(id)arg1 fromWebView:(id)arg2;
- (_Bool)checkWebViewRunMode:(id)arg1;
- (_Bool)checkServiceRunInMainThread:(id)arg1;
- (_Bool)checkServiceRunMode:(id)arg1;
- (_Bool)hasPermissionToShowActionSheetMenuType:(unsigned int)arg1;
- (void)checkUserAuthWithJSAPI:(id)arg1 permissionAppID:(id)arg2 model:(id)arg3 handler:(CDUnknownBlockType)arg4 failHandler:(CDUnknownBlockType)arg5 transferHandler:(CDUnknownBlockType)arg6 fromWebView:(id)arg7;
- (_Bool)isJsApiPermissionAutoGrantedInWebViewEnvironment:(id)arg1;
- (id)getPermissionResultWithJSAPI:(id)arg1 withAppId:(id)arg2 fromWebView:(id)arg3 byTempPermission:(id)arg4;
- (id)getPermissionResultWithJSAPI:(id)arg1;
- (unsigned long long)getWebViewDepthInStack;
- (id)getLastWebViewFrom:(id)arg1;
- (id)getFirstWebViewFrom:(id)arg1;
- (_Bool)webViewIsFirstPage:(id)arg1;
- (void)firstPageWebViewDidSweepBack:(id)arg1;
- (_Bool)isPresentedBySupportLandscapeViewController:(id)arg1;
- (void)webViewClickCustomRightButton:(id)arg1;
- (void)reportEmbedExitReason:(unsigned int)arg1;
- (void)exitToBackgroundFromWebView:(id)arg1 action:(long long)arg2;
- (void)webViewBeforeClickReturnButton:(id)arg1;
- (void)makeWebViewEnableClose:(_Bool)arg1;
- (_Bool)isNeedWriteGameEvaluateBeforeExit;
- (_Bool)isNeedWriteEvaluateBeforeExit;
- (_Bool)isForceEnableClose;
- (void)killAppFrom:(id)arg1 animate:(_Bool)arg2 reason:(long long)arg3;
- (void)killAppFrom:(id)arg1 animate:(_Bool)arg2;
- (void)enterBackgroundWithMode:(long long)arg1 action:(long long)arg2 animate:(_Bool)arg3 completion:(CDUnknownBlockType)arg4;
- (void)enterBackgroundState;
- (void)enterBackgroundAndDismissPages:(_Bool)arg1 completion:(CDUnknownBlockType)arg2;
- (void)enterBackgroundAndDismissPages:(_Bool)arg1;
- (void)onOrientationDidChangeTo:(long long)arg1;
- (void)setCapsuleMenuState:(long long)arg1;
- (id)anchorViewForCapsuleMenu;
- (id)popWebViewCount:(int)arg1 fromWebView:(id)arg2 animated:(_Bool)arg3 completion:(CDUnknownBlockType)arg4;
- (id)popWebViewCount:(int)arg1 fromWebView:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)popToWebView:(id)arg1 fromWebView:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)popToFirstWebViewFrom:(id)arg1 animated:(_Bool)arg2 completion:(CDUnknownBlockType)arg3;
- (void)popToFirstWebViewFrom:(id)arg1 animated:(_Bool)arg2;
- (id)extJSModels;
- (void)webview:(id)arg1 interactivePopBackDidEnd:(_Bool)arg2;
- (void)webview:(id)arg1 interactivePopBackWillEnd:(_Bool)arg2;
- (void)webview:(id)arg1 interactivePopBackDidChangeProgress:(double)arg2;
- (void)webviewIneractivePopBackDidBegin:(id)arg1;
- (void)webViewDidNavigateTo:(id)arg1;
- (_Bool)webViewShouldInitFullWebView:(id)arg1;
- (void)webView:(id)arg1 didEndDragging:(id)arg2;
- (void)webView:(id)arg1 willEndDragging:(id)arg2 withVelocity:(struct CGPoint)arg3 targetContentOffset:(struct CGPoint *)arg4;
- (void)webView:(id)arg1 willBeginDragging:(id)arg2;
- (void)webView:(id)arg1 didScroll:(id)arg2;
- (void)webViewDidSwitchTab:(id)arg1;
- (id)getPreviousWebViewFromWebView:(id)arg1;
- (id)getTabChildWebViewWithRelativeURL:(id)arg1 fromWebView:(id)arg2;
- (_Bool)webViewIsCoveredByTemplateNav:(id)arg1;
- (unsigned int)webViewCapsuleMenuType:(id)arg1;
- (void)webViewOnBeforeEveluateIndexData:(id)arg1;
- (void)processPushOrPresentAViewController:(id)arg1;
- (void)webviewDidLayout:(id)arg1;
- (void)webView:(id)arg1 didPresent:(id)arg2;
- (void)webViewDidBePresentd:(id)arg1;
- (void)webViewDidPush:(id)arg1;
- (void)webViewDidBeDismissed:(id)arg1;
- (void)webViewDidBePoped:(id)arg1;
- (void)webViewWillBePoped:(id)arg1;
- (void)webViewDidDisappear:(id)arg1;
- (void)webViewDidAppear:(id)arg1;
- (unsigned long long)getMainVMJSFootprintMemoryInMB;
- (unsigned long long)getAllVMJSFootprintMemoryInMB;
- (void)getWorkersVMJSFootprintMemoryInMBWithCompletion:(CDUnknownBlockType)arg1;
- (void)getMainVMJSFootprintMemoryInMBWithCompletion:(CDUnknownBlockType)arg1;
- (void)getAllVMJSFootprintMemoryInMBWithCompletion:(CDUnknownBlockType)arg1;
- (void)getWorkersVMJSFootprintMemoryInBytesWithCompletion:(CDUnknownBlockType)arg1;
- (void)getMainVMJSFootprintMemoryInBytesWithCompletion:(CDUnknownBlockType)arg1;
- (void)getAllVMJSFootprintMemoryInBytesWithCompletion:(CDUnknownBlockType)arg1;
- (void)registerPerformanceIndex;
- (id)getAndDeletePreLoadWebView:(id)arg1;
- (void)setupPreloadWebViewFromWebView:(id)arg1 isSkyline:(_Bool)arg2;
- (void)releasePreloadedWebViewForReason:(unsigned long long)arg1;
- (void)updateAllWebView;
- (id)generateExtraInfoWithAppID:(id)arg1 Contact:(id)arg2;
- (id)getTabChildWebViewWithRelativeURL:(id)arg1 fromParentWebView:(id)arg2;
- (id)getChildWebViewWithRelativeURL:(id)arg1 childExtraInfo:(id)arg2 fromParentWebView:(id)arg3;
- (id)getNewWebViewControllerWithContact:(id)arg1 appID:(id)arg2 baseURL:(id)arg3 pageRelativeURL:(id)arg4 webviewId:(unsigned int)arg5 preloadedWebview:(id)arg6;
- (void)popAllAndSwitchTab:(id)arg1 fromVC:(id)arg2;
- (void)_removeAllParentWebViewFromChild:(id)arg1 andGetRemovedWebView:(id *)arg2;
- (void)clearAndPopAllWebViewIgnoreTab;
- (void)checkBackgroundStatus;
- (id)getPagesRecordFromPageMgr;
- (void)pageStackDidUpdate;
- (void)leaveWebView:(id)arg1;
- (void)removeDissociativeWebView:(id)arg1;
- (void)removeWebView:(id)arg1;
- (void)addWebView:(id)arg1;
- (void)closePresentedViewController;
- (void)dismissTaskPage:(_Bool)arg1 completion:(CDUnknownBlockType)arg2;
- (void)removeWebViewFromNavigationController:(_Bool)arg1 completion:(CDUnknownBlockType)arg2;
- (void)sendUIEventAfterShowFromBackground:(id)arg1;
- (void)showWebViewFromBackground:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (_Bool)isWeAppUseModule;
- (_Bool)loadPackageConfigWithContact:(id)arg1 getError:(id *)arg2;
- (_Bool)loadAppConfig:(id)arg1;
- (void)setupAppConfig;
- (void)relaunchToMigrateTargetWeAppIdWithFakeLoading:(id)arg1;
- (_Bool)relaunchToLatestVersionWithFakeLoading;
- (void)setupCertFileAndPredownloadGameWithAppID:(id)arg1 contact:(id)arg2 packageConfig:(id)arg3 isLazyLoad:(_Bool)arg4;
- (_Bool)setupConfigDataWithAppID:(id)arg1 contact:(id)arg2 packageConfig:(id)arg3 relativeURL:(id)arg4 relyPluginInfoDatas:(id)arg5 isLazyLoad:(_Bool)arg6 entryPackages:(id)arg7;
- (_Bool)relativeURLShouldUseLazyLoad:(id)arg1;
- (void)packageCheckedSuccess:(_Bool)arg1 downloadedInfoDatas:(id)arg2;
- (void)deleteLifeCycleRecord;
- (void)saveLifeCycleRecord;
- (void)reportLifeCycleDetectedQualityIssueType:(unsigned int)arg1 subType:(unsigned int)arg2 inPage:(id)arg3 doubleCheckScene:(unsigned long long)arg4 doubleCheckReason:(unsigned long long)arg5;
- (void)updateLifeCycleTaskDidDieWithReason:(unsigned long long)arg1;
- (void)updateLifeCycleDetectedPageRecoverReloadedForPage:(id)arg1;
- (void)doubleCheckWhiteScreenForPageIfNeeded:(id)arg1 scene:(unsigned long long)arg2;
- (void)updateLifeCycleDetectedCrash:(id)arg1 subType:(unsigned long long)arg2;
- (void)updateLifeCyclePageDetectedWhiteScreen:(id)arg1 subType:(unsigned long long)arg2 doubleCheckScene:(unsigned long long)arg3 doubleCheckReason:(unsigned long long)arg4;
- (void)updateLifeCycleServiceJSError:(id)arg1;
- (id)getLifeCyclePageDownloadedModulesForPage:(id)arg1;
- (void)updateLifeCycleColdLaunchWithDownloadedModules:(id)arg1;
- (void)updateLifeCyclePageRouteWithDownloadedModules:(id)arg1 forPage:(id)arg2;
- (void)updateLifeCyclePageJsError:(id)arg1 forPage:(id)arg2;
- (void)updateLifeCyclePageStackRecord;
- (void)updateLifeCycleBaseRecord;
- (void)didFinishSetupService;
- (void)noticePerformanceMetricForDownloadedInfoData:(id)arg1;
- (void)didFinishCheckInfoDatasWithResult:(id)arg1;
- (void)sendCacheChannelMsgsIfHave;
- (void)tryAsyncUpdateAppConfig;
- (void)tryAsyncUpdateContact;
- (void)cancelVersionFallbackLogic;
- (void)saveBackUpContact:(id)arg1;
- (void)checkUpdateManager;
- (void)didFinishLaunch;
- (void)didFinishHotLaunch;
- (void)didFinishColdLaunch;
- (void)didFinishReLaunch;
- (void)webviewDidShowFromBackground;
- (void)detectCurrentNetType;
- (void)willStartLaunch;
- (void)willStartColdLaunch;
- (void)willStartHotLaunch;
- (void)launchWebViewDidAppear;
- (id)getIgnoreOtherWebViewListOnReloadFirstPage;
- (void)removeAllParentWebViewFromChild:(id)arg1 andGetRemovedWebView:(id *)arg2;
- (void)removeParentWebView:(id)arg1;
- (void)removeChildWebView:(id)arg1 fromParentWebView:(id)arg2;
- (void)getChildWebView:(id *)arg1 withRelativeURL:(id)arg2 childExtraInfo:(id)arg3 fromParentWebView:(id)arg4;
- (void)setupAppServiceAndWebViewWithAppID:(id)arg1 contact:(id)arg2 packageConfig:(id)arg3 baseURL:(id)arg4 pageRelativeURL:(id)arg5 getWebView:(id *)arg6;
- (void)setupTaskForSpecificPageMode;
- (void)detachPreloadAppTaskIfPossible:(id)arg1;
- (id)fetchPreloadAppTaskIfPossibleWithAppID:(id)arg1;
- (void)fetchPreloadAppServiceIfPossibleWithContact:(id)arg1;
- (void)navigationControllerDidChangeTo:(id)arg1;
- (void)onLibWorkerCreatedWithType:(id)arg1;
- (void)onDidShowLoadingWithPresentingViewController:(id)arg1;
- (void)onWillShowLoadingWithPresentingViewController:(id)arg1;
- (void)onDidPresentWithPresentingViewController:(id)arg1;
- (id)popRelaunchAppLoader;
- (id)popAppLoader;
- (id)getLoadingViewController;
- (_Bool)isChildPageLoading;
- (_Bool)isRelaunchLoading;
- (_Bool)isColdLaunchLoading;
- (_Bool)isLoading;
- (void)setEnterScene:(unsigned int)arg1;
- (void)markTaskHomePageEntryVisible:(_Bool)arg1;
- (void)updateTaskSessionInfo:(id)arg1;
- (_Bool)shouldTerminateByBluetoothLogicWhenSuspend;
- (void)onOpenJumpingEmbedAppTaskProfile;
- (id)getCurrentCaptureImage:(_Bool)arg1;
- (_Bool)launchParameterShouldUseSimulatedNativeLoading;
- (unsigned long long)darkmodeSpecificType;
- (_Bool)shouldForbidDarkMode;
- (_Bool)canKeepAliveInBackground;
- (void)updateSheetBrandTitleBarIfNeedByContact:(id)arg1;
- (void)addCapsuleMenuIfNeeded;
- (void)removeAllCustomUIWidgetView;
- (void)layoutCustomUIWidget:(id)arg1;
- (void)applyCustomUIWidget:(id)arg1;
- (void)addCustomUIWidgetViewIfNeeded;
- (void)applyCustomUIWidgetViewInOpenParameter;
- (void)removeUnNeedCustomUIWidgetViewThatAlreadyAdded;
- (_Bool)brandTitleBarShouldHideShareButton:(id)arg1;
- (void)brandTitleBarOnClickCloseButton:(id)arg1;
- (void)brandTitleBarOnClickHeader:(id)arg1;
- (void)brandTitleBarOnClickShareButton:(id)arg1;
- (void)updateBrandTitleBarFrame;
- (void)removeBrandTitleBar;
- (void)addBrandTitleBarIfNeeded;
- (void)removeEmbedModeBackgroundView;
- (void)addEmbedModeBackgroundViewIfNeeded;
- (void)onTapEmbedWeAppTaskBackground:(id)arg1;
- (void)removeSystemCoverView;
- (void)animateHideWmpfLaunchTipViewIfNeeded;
- (void)addWmpfLaunchTipViewIfNeeded;
- (void)addSystemCoverViewIfNeeded;
- (id)getNavigationController;
- (_Bool)isWebViewIdValid:(unsigned long long)arg1;
- (id)getWebViewByID:(unsigned long long)arg1;
- (_Bool)isInjectPubliclibFinished;
- (id)getCurrentWebView;
- (id)getFirstWebView;
- (id)getWebViewListInNavigation;
- (id)getAllWebViewsIncludingPreloadWebView;
- (id)getAllWebViews;
- (void)syncSendJSEventToWebView:(id)arg1 param:(id)arg2 toWebView:(unsigned int)arg3 eventId:(unsigned int)arg4;
- (void)sendJSEventToWebView:(id)arg1 event:(id)arg2 param:(id)arg3 whenInWebviewList:(id)arg4;
- (void)sendJSEventToWebView:(id)arg1 param:(id)arg2 toWebviews:(id)arg3;
- (unsigned int)actualWebViewMaxDepth;
- (_Bool)isReachMaxWebViewDepth;
- (void)openChildWebViewWithRelativeURL:(id)arg1 childExtraInfo:(id)arg2 fromParent:(id)arg3 isPopParent:(_Bool)arg4 isPopAllParent:(_Bool)arg5 completeHandler:(CDUnknownBlockType)arg6;
- (void)openFirstWebViewWithRelativeURL:(id)arg1 childExtraInfo:(id)arg2 loaderContextData:(id)arg3 navigationController:(id)arg4 errorHandler:(CDUnknownBlockType)arg5 successHandler:(CDUnknownBlockType)arg6;
- (void)openChildWebViewWithRelativeURL:(id)arg1 childExtraInfo:(id)arg2 fromParent:(id)arg3 isPopAllParent:(_Bool)arg4 completeHandler:(CDUnknownBlockType)arg5;
- (void)openChildWebViewWithRelativeURL:(id)arg1 childExtraInfo:(id)arg2 fromParent:(id)arg3 isPopParent:(_Bool)arg4 completeHandler:(CDUnknownBlockType)arg5;
- (_Bool)shouldEnterSceneKeepLastPage:(unsigned int)arg1;
- (_Bool)shouldRelaunchWithEnterScene:(unsigned int)arg1 lastEnterScene:(unsigned int)arg2 relativeUrl:(id)arg3 isSimulated:(_Bool)arg4 isGame:(_Bool)arg5;
- (void)startProvideApi:(id)arg1 openInfo:(id)arg2 handlerWrapper:(id)arg3;
- (void)tryReportWmpfUserCloseWeAppWhenLoading;
- (void)openWithContactAfterProcessPresentState:(id)arg1 openInfo:(id)arg2 taskExtInfo:(id)arg3 errorHandler:(CDUnknownBlockType)arg4 successHandler:(CDUnknownBlockType)arg5 cancelHandler:(CDUnknownBlockType)arg6 PresentingNavigationController:(id)arg7;
- (void)fillTaskExtInfoFromTaskOpenInfo;
- (void)openWithContact:(id)arg1 openInfo:(id)arg2 taskExtInfo:(id)arg3 errorHandler:(CDUnknownBlockType)arg4 successHandler:(CDUnknownBlockType)arg5 cancelHandler:(CDUnknownBlockType)arg6;
- (void)openWithContact:(id)arg1 openInfo:(id)arg2 taskExtInfo:(id)arg3 handlerWrapper:(id)arg4;
- (void)recoverTask;
- (_Bool)checkCurrentPageIdentical:(id)arg1 webView:(id)arg2;
- (id)currentExtInfo;
- (_Bool)readIsTransparentBackgroundSupport;
- (_Bool)shouldKeepContextView;
- (_Bool)shouldForbidEntryAnimation;
- (unsigned int)backgroundTaskMaxTimeout;
- (_Bool)isFirstWebViewInNavigator;
- (_Bool)isForeground;
- (_Bool)isShowOnForeground;
- (unsigned long long)webViewInNavigationCount;
- (id)getStrListUseCodeCacheFileNameUsr;
- (id)getStrListUseCodeCacheFileNamePubLib;
- (_Bool)bytecodeEnbaled;
- (unsigned int)engineType;
- (id)getTaskExtInfo;
- (id)getTaskOpenInfo;
- (unsigned int)appVersion;
- (unsigned int)debugModeType;
- (id)currentAppInfo;
- (id)relativeURL;
- (id)pkgConfig;
- (id)contact;
- (id)appID;
@property(readonly, copy) NSString *description;
- (void)dealloc;
- (id)initWithAppID:(id)arg1 debugModeType:(unsigned int)arg2;
- (id)generateShouldShowEventParamsWithSplashADScene:(unsigned long long)arg1;
- (void)sendSplashADJSEventToService:(id)arg1 params:(id)arg2;
- (void)splashAD_handleSplashADButtonClickedEventWithScene:(unsigned long long)arg1 buttonType:(unsigned long long)arg2;
- (void)onSplashADViewControllerDidEnterBackground:(id)arg1;
- (void)onSplashADViewControllerWillEnterForeground:(id)arg1;
- (void)onSplashADViewControllerDidClosed:(id)arg1;
- (void)onSplashADViewControllerDidDisappear:(id)arg1;
- (void)onSplashADViewControllerWillDisappear:(id)arg1;
- (void)splashAD_sendLaunchSceneOnSplashADShowIfPossible;
- (void)splashAD_recordLaunchShowEvent;
- (void)splashAD_recordLaunchDidAppear;
- (void)onSplashADViewControllerDidAppear:(id)arg1;
- (void)onSplashADViewControllerWillAppear:(id)arg1;
- (void)onSplashADViewControllerViewWillLayoutSubviews:(id)arg1;
- (void)onSplashADViewControllerViewDidLoad:(id)arg1;
- (void)onSplashADViewControllerMenuButtonClicked:(id)arg1;
- (void)onSplashADViewControllerCloseButtonClicked:(id)arg1;
- (void)splashAD_closeMenuSplashADViewController:(_Bool)arg1 completion:(CDUnknownBlockType)arg2;
- (void)splashAD_showMenuSplashADViewControllerWithNavigationController:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)hideAndReleaseSplashAdWindow;
- (void)splashAD_removeSplashADWindow:(_Bool)arg1 completion:(CDUnknownBlockType)arg2;
- (void)splashAD_createSplashADWindow;
- (void)splashAD_handleShouldShowEvent;
- (void)splashAD_forceRemoveSplashAdIfNeeded;
- (void)mainThread_splashAD_handleSplashADContainerIsPreload:(_Bool)arg1;
- (void)splashAD_handleSplashADContainerIsPreload:(_Bool)arg1;
- (void)splashAD_handleDidShowLoadingWithPresentingViewController:(id)arg1;
- (_Bool)splashAD_sendShouldShowIfAllowed;
- (void)splashAD_handleDidInjectAdWorker;
- (void)splashAD_handleWillShowLoadingWithPresentingViewController:(id)arg1;
@property(retain, nonatomic) WAAppTaskSplashADConfig *splashADConfig;
- (id)wifiPlugin;
- (void)handleWeAppHotspotCommand:(id)arg1;
- (_Bool)isRegisterForHandleWeAppHotspotCommand;
- (void)forceRelaunchToMigrateTargetWeAppId:(id)arg1 needFakeLoading:(_Bool)arg2;
- (_Bool)forceRelaunchToLatestVersionWithIsNeedFakeLoading:(_Bool)arg1 isSync:(_Bool)arg2;
- (void)reportFallbackToLocalContact:(id)arg1 openInfo:(id)arg2 scene:(unsigned long long)arg3;
- (void)forceRelaunchToFallbackVersionInScene:(unsigned long long)arg1;
- (void)directlyDoRelaunchAction:(_Bool)arg1 isNeedFakeLoading:(_Bool)arg2;
- (void)forceRelaunchTaskAfterFirstWebViewAppearWithFakeLoading;
- (void)setFakeWindowVC:(id)arg1;
- (id)fakeWindowVC;
- (void)delayShow:(id)arg1;
- (void)beginFirstPageMinimizationTansitionAnimationWithGesture:(id)arg1 percent:(double)arg2 manually:(_Bool)arg3;
- (void)beginOtherPageMinimizationTansitionAnimation:(id)arg1 WithGesture:(id)arg2 percent:(double)arg3;
- (void)onMinimizeInteractiveTransitionDidEnd:(id)arg1 isComplete:(_Bool)arg2 panGesture:(id)arg3 miniTaskVCAnimationContext:(id)arg4;
- (void)onMinimizeInteractiveTransitionWillEnd:(id)arg1 isComplete:(_Bool)arg2 panGesture:(id)arg3 percent:(double)arg4;
- (void)onMinimizeInteractiveTransitionChange:(id)arg1 withProgress:(double)arg2 panGesture:(id)arg3;
- (void)onMinimizeInteractiveTransitionBegin:(id)arg1 panGesture:(id)arg2;
- (void)unminimizedCurTask;
- (_Bool)minimizedCurTaskManually:(_Bool)arg1 generateType:(unsigned long long)arg2;
- (_Bool)canMinimizedCurTaskOrShowTips;
- (_Bool)isCurTaskManuallyMinimized;
- (_Bool)isCurTaskMinimized;
- (_Bool)isCurTaskSupportMinimization;
- (void)updateMinimizeSnapShotImg;
- (void)internalTryMinimizeCurTaskIfNeeded;
- (void)tryMinimizeCurTaskIfNeeded;
- (void)tryMinimizeCurTaskIfNeededInBackground;
- (void)updatePassiveMinimizationViewWhenStateChanged;
- (void)updatePassiveMinimizationViewWhenEnterBackground;
- (void)updatePassiveMinimizationViewWhenEnterForeground;
- (void)updateMinimizationDataIfNeedWhenTaskClosed:(unsigned long long)arg1;
- (void)checkChangeNavigationControllerBeforeDismiss:(id *)arg1;
- (void)enterBackgroundWithDismissAppIDList:(id)arg1;
- (void)processSelfPresentedStateOnOpen2:(id *)arg1;
- (void)processSelfPresentedStateOnOpen:(id *)arg1 isSilentOpen:(_Bool)arg2 Completion:(CDUnknownBlockType)arg3;
- (void)dismissMyselfAndPresentedTasks;
- (void)setBackWeAppReferrerInfo:(id)arg1;
- (void)checkRemovedJumpInfoBackgroundStatus:(id)arg1;
- (void)removeJumpWeAppListAndCheckBackgroundStatus;
- (void)passJumpBackRefererInfoAndRemoveJumpRelation:(id)arg1 privateExtraData:(id)arg2;
- (void)passJumpBackRefererInfoAndRemoveJumpRelation:(id)arg1;
- (void)navigateBackWeApp:(id)arg1 privateExtraData:(id)arg2;
- (void)backgroundLocatingDidStop;
- (void)backgroundLocatingDidStart;
- (id)getFuzzyLocationPermisstionDescription;
- (id)getLocationPermisstionDescription;
- (_Bool)isRegisteredLocationBackgroundMode;
- (_Bool)canKeepAliveByLocatingForReleaseMode;
- (_Bool)canKeeyAliveByLocatingForAllDebugMode;
- (_Bool)canKeepAliveByLocating;
- (void)forceStopBackgroundLocating;
- (void)forceStopForegroundLocating;
- (void)forceStopLocating;
- (_Bool)isUpdatingBackgroundLocation;
- (_Bool)isUpdatingForegroundLocation;
- (_Bool)isUpdatingLocation;
- (id)getResizeParam:(id)arg1;
- (void)trySendWebviewResizeEvent:(id)arg1;
- (void)webviewDidResize:(id)arg1;
- (_Bool)currentWebviewNeedResize:(id)arg1;
- (_Bool)trySendOnAppRouteResizedEvent:(id)arg1;
- (_Bool)currentWebviewNeedNotifyResizedLater:(id)arg1;
- (_Bool)isCGFloatEqual:(double)arg1 And:(double)arg2;
- (void)tryCloseSelfIfNeverEnterForeground;
- (_Bool)isSilentOpenByBluetoothMonitor;
- (void)setIsSilentOpenByBluetoothMonitor:(_Bool)arg1;
- (void)sendOnMonitoredBluetoothDeviceFoundJSEvent:(id)arg1;
- (void)bluetooth_didModifyAppAuth:(_Bool)arg1 authDataList:(id)arg2;
- (void)didBluetoothAppBackgroundTimeout;
- (void)didBluetoothBackgroundKeepAliveTimeout;
- (void)bluetooth_didConnectDevice;
- (void)bluetooth_didLostAllConnection;
- (void)forceStopBluetooth;
- (void)forceStopBluetoothBackgroundKeepAlive;
- (void)disallowBluetoothBackground;
- (id)bleInstance;
- (void)didDisableBackgroundBluetooth;
- (void)didEnableBackgroundBluetooth;
- (id)getBluetoothPermissionDescription;
- (_Bool)canKeepAliveByBluetooth;
- (void)bluetooth_handleAppDidEnterForeground;
- (void)bluetooth_handleAppDidEnterBackground;
- (void)bluetooth_handleDidEnterForeground;
- (void)bluetooth_handleDidEnterBackground;
- (void)bluetooth_handleDidSuspend;
- (_Bool)hasBluetoothConnection;
- (_Bool)isBluetoothBackgroundModeEnabled;
- (id)bluetoothAppBackgroundTimer;
- (void)setBluetoothAppBackgroundTimer:(id)arg1;
- (id)bluetoothSuspendTimer;
- (void)setBluetoothSuspendTimer:(id)arg1;
- (id)_getSkylineOpConfigList;
- (void)onSkylineNavigateBackDone:(id)arg1;
- (void)onSkylineNavigateBack:(id)arg1;
- (void)onSkylineRouteDone:(id)arg1;
- (void)onSkylineWindowReady:(id)arg1;
- (void)onSkylineRuntimeReady;
- (void)onSkylineRuntimeLaunch;
- (id)onLoadPkgResource:(id)arg1;
- (id)onLoadPubResource:(id)arg1;
- (void)onRunServiceBlock:(CDUnknownBlockType)arg1;
- (void)updateSkylineDarkMode;
- (unsigned long long)differentSkylineViewCnt;
- (unsigned int)skylineViewCnt;
- (_Bool)hasSkylineRuntime;
- (void)runAnyBlock:(CDUnknownBlockType)arg1;
- (_Bool)skylineDisableSwipeBack:(id)arg1;
- (id)popWebViewSkylineCount:(int)arg1 fromWebView:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (_Bool)useSkylineForPage:(id)arg1;
- (_Bool)useSkylineForDefault;
- (_Bool)useSkyline;
- (_Bool)p_isOpConfigEnableSkylineWithPath:(id)arg1 opConfig:(id)arg2;
- (_Bool)isOpConfigEnableSkylineWithPath:(id)arg1;
- (_Bool)isOpConfigEnableSkyline;
- (void)webViewDidInternalInit:(id)arg1;
- (id)waitForLaunchWebView;
- (void)initSkylineValid;
- (void)setupSkylineRuntime;
- (void)consoleLog:(id)arg1 isSendout:(_Bool)arg2;
- (void)dismissMaskView;
- (void)showMaskView:(id)arg1 isButtonHidden:(_Bool)arg2;
@property(copy, nonatomic) NSString *serverString; // @dynamic serverString;
@property(copy, nonatomic) NSString *connectString; // @dynamic connectString;
@property(nonatomic) unsigned int recvCount; // @dynamic recvCount;
@property(copy, nonatomic) NSString *recvLength; // @dynamic recvLength;
@property(nonatomic) unsigned int sendCount; // @dynamic sendCount;
@property(copy, nonatomic) NSString *sendLength; // @dynamic sendLength;
@property(nonatomic) unsigned int noSendCount; // @dynamic noSendCount;
@property(nonatomic) unsigned int noConfirmedCount; // @dynamic noConfirmedCount;
@property(nonatomic) _Bool isDisplay; // @dynamic isDisplay;
- (void)animBeforeTransition:(id)arg1 type:(long long)arg2;
- (void)handleNavigateToEventWithWebview:(id)arg1 dic:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (id)getFloatVideoPlugin;
- (unsigned long long)releasePreloadPage;
- (unsigned long long)releaseForegroundPage;
- (unsigned long long)releaseBackgroundPages;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

