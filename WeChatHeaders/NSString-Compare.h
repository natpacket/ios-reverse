//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <Foundation/NSString.h>

#import "MMListDiffable-Protocol.h"
#import "WCFinderLiveOnPromoteBubbleActionExtraInfoProvider-Protocol.h"
#import "WCTColumnCoding-Protocol.h"
#import "WCTValueProtocol-Protocol.h"

@interface NSString (Compare) <WCFinderLiveOnPromoteBubbleActionExtraInfoProvider, MMListDiffable, WCTValueProtocol, WCTColumnCoding>
+ (id)receiverName:(unsigned long long)arg1;
+ (id)MMMusicStatistics_appendSessionID;
+ (_Bool)isEmptyString:(id)arg1;
+ (id)repeat:(id)arg1 times:(int)arg2;
+ (id)genFinderMembershipExpireTimeByTimestamp:(unsigned int)arg1;
+ (id)genFinderPrivateUnreadMsgByUInt:(unsigned long long)arg1;
+ (id)genFinderEventExpiredTimeStringByUInt:(unsigned int)arg1;
+ (id)calDisplayNameWithCommentDidsplayName:(id)arg1 maxCommentCount:(unsigned long long)arg2;
+ (id)finderLocationDisplayStrWithCountryCode:(id)arg1 provinceCode:(id)arg2 cityCode:(id)arg3;
+ (id)finderLiveInteractCountAtProfile:(unsigned long long)arg1;
+ (id)finderLiveCardInteractCount:(unsigned long long)arg1;
+ (id)finderHeatOfTopicInteractCount:(unsigned long long)arg1;
+ (id)getCommentDetailFailErrorMSGWithErrorCode:(int)arg1 errorMSG:(id)arg2;
+ (id)commentFailTipsWithCommentErrorCode:(int)arg1;
+ (id)genFinderLiveNoticeQRCodeTimeStringByTimestamp:(unsigned int)arg1 paid:(_Bool)arg2 memberLive:(_Bool)arg3;
+ (id)genFinderLiveNoticeTimeShortStringByUInt:(unsigned int)arg1;
+ (id)genFinderLiveFeedNoticeTimeStringWithoutDayOfWeekByUInt:(unsigned int)arg1;
+ (_Bool)isSameYearWithTime:(unsigned int)arg1;
+ (id)genFinderLiveNoticeTimeStringWithoutDayOfWeekByUInt:(unsigned int)arg1;
+ (id)genFinderLivingTimeStringByUInt:(unsigned int)arg1;
+ (id)genFinderLiveNoticeTimeStringByUInt:(unsigned int)arg1;
+ (id)genFinderDetailTimeStringForCard:(unsigned long long)arg1;
+ (id)genLiveReplayDetailTimeStringFrom:(unsigned long long)arg1;
+ (id)genFinderSimpleDateTimeStringByTimestamp:(long long)arg1;
+ (id)genFinderDateTimeStringByTimestamp:(long long)arg1;
+ (id)genFinderWechatMentionTimeStringByUInt:(unsigned int)arg1;
+ (id)genFinderDetailTimeStringWithTime:(unsigned long long)arg1 config:(id)arg2;
+ (id)genFinderDetailTimeStringByUInt:(unsigned long long)arg1;
+ (id)finderOtherInteractCount:(unsigned long long)arg1;
+ (id)finderSelfProfileInteractCount:(unsigned long long)arg1;
+ (id)legalFormatWithOriginalValue:(unsigned long long)arg1 divider:(unsigned long long)arg2 decimalPlaces:(unsigned long long)arg3;
+ (id)legalFormatWithOriginalValue:(unsigned long long)arg1 divider:(unsigned long long)arg2;
+ (id)getTextFrom:(struct XmlReaderNode_t *)arg1 atNodeName:(id)arg2;
+ (id)mmLocalizedStringForKey:(id)arg1 defaultString:(id)arg2;
+ (id)wwkapi_nilobj;
+ (id)stringFromUInt32:(unsigned int)arg1;
+ (id)stringFromUInt64:(unsigned long long)arg1;
+ (id)stringWithStdString:(const void *)arg1;
+ (id)sc_stringWithSTDString:(const void *)arg1;
+ (id)stringWithView:(const void *)arg1;
+ (unsigned long long)columnType;
+ (id)unarchiveWithWCTValue:(id)arg1;
+ (unsigned long long)glyphIndexForUnicodeString:(id)arg1;
+ (id)convertSimpleUnicodeStr:(id)arg1;
+ (_Bool)isEmoji:(id)arg1;
+ (id)stringWithCharacter:(unsigned short)arg1;
+ (double)baselineWithFont:(id)arg1 height:(double)arg2;
+ (id)qb_stringWithName:(id)arg1 inAttributes:(id)arg2;
+ (id)safeStringWithString:(id)arg1;
+ (long long)captureCountForRegex:(id)arg1 options:(unsigned int)arg2 error:(id *)arg3;
+ (long long)captureCountForRegex:(id)arg1;
+ (void)clearStringCache;
+ (id)getShowStringForAlertBySize:(unsigned long long)arg1;
+ (id)getShowStringBySize:(unsigned long long)arg1;
+ (id)getShowDetailStringBySize:(unsigned long long)arg1;
+ (id)generatePrivacyStringFromArray:(id)arg1;
+ (id)generatePrivacyString:(id)arg1;
+ (id)filterInvalidUTF8CharFrom:(id)arg1;
+ (id)safeStringWithUTF8String:(const char *)arg1;
+ (_Bool)isString:(id)arg1 equalToString:(id)arg2 nilEqualsToEmpty:(_Bool)arg3;
+ (_Bool)isString:(id)arg1 equalToString:(id)arg2;
+ (id)stringWithUInt64:(unsigned long long)arg1;
- (long long)compareByContactKey:(id)arg1;
- (int)getSpecialKeyValue;
- (long long)compareByContactKeyGeneric:(id)arg1;
- (id)limitStringWithLength:(unsigned long long)arg1;
- (id)componentsSeparatedByLimitCount:(long long)arg1;
- (id)attributedWithLineHeight:(double)arg1 font:(id)arg2;
- (CDUnknownBlockType)MMMusicStatistics_appendJumpType;
- (CDUnknownBlockType)MMMusicStatistics_appendSceneNote;
- (CDUnknownBlockType)MMMusicStatistics_appendExitType;
- (CDUnknownBlockType)MMMusicStatistics_appendMVUserId;
- (CDUnknownBlockType)MMMusicStatistics_appendCover;
- (CDUnknownBlockType)MMMusicStatistics_appendSect;
- (CDUnknownBlockType)MMMusicStatistics_appendSinger;
- (CDUnknownBlockType)MMMusicStatistics_appendHasLyric;
- (CDUnknownBlockType)MMMusicStatistics_appendMVNonceID;
- (CDUnknownBlockType)MMMusicStatistics_appendMVObjectID;
- (CDUnknownBlockType)MMMusicStatistics_appendMusicLength;
- (CDUnknownBlockType)MMMusicStatistics_appendScene;
- (CDUnknownBlockType)MMMusicStatistics_appendAppID;
- (CDUnknownBlockType)MMMusicStatistics_appendMusicUrl;
- (CDUnknownBlockType)MMMusicStatistics_appendSongName;
- (CDUnknownBlockType)MMMusicStatistics_appendDataURL;
- (CDUnknownBlockType)MMMusicStatistics_appendWebURL;
- (CDUnknownBlockType)MMMusicStatistics_appendSongID;
- (CDUnknownBlockType)MMMusicStatistics_appendString;
- (id)startTagWithAttributes:(id)arg1 withLowerMode:(_Bool)arg2;
- (id)endTagWithLowerMode:(_Bool)arg1;
- (id)startTagWithLowerMode:(_Bool)arg1;
- (id)traditionalCN;
- (id)simplifyCN;
- (id)cardMD5;
- (id)fromBase64;
- (id)toBase64;
- (id)md5;
- (id)urlDecode;
- (id)urlEncode;
- (id)rpad:(int)arg1 string:(id)arg2;
- (id)lpad:(int)arg1 string:(id)arg2;
- (_Bool)matches:(id)arg1;
- (_Bool)contains:(id)arg1;
- (_Bool)startsWith:(id)arg1;
- (_Bool)endsWith:(id)arg1;
- (id)withoutDiacritic;
- (id)lcFirst;
- (id)ucFirst;
- (id)snakeCase;
- (id)pascalCase;
- (id)camelCase;
- (id)trimRight;
- (id)trimLeft;
- (id)split:(int)arg1;
- (id)split;
- (id)replaceRegexp:(id)arg1 with:(id)arg2;
- (id)replace:(id)arg1 with:(id)arg2;
- (id)trimWithNewLine;
- (id)trim;
- (id)substr:(int)arg1 length:(int)arg2;
- (id)prepend:(id)arg1;
- (id)append:(id)arg1;
- (id)toNumber;
- (id)initials;
- (id)explode:(id)arg1;
- (id)stringByCutLineWrapWithMaxCount:(unsigned long long)arg1 haveCutted:(_Bool *)arg2;
- (unsigned long long)lineWrapCount;
- (id)stringByTruncatingToTheFirstLineAndAddEllipses:(_Bool)arg1;
- (id)rangeArrayOfSubString:(id)arg1;
- (_Bool)isStringContainNumber;
- (unsigned long long)extractNumber;
- (id)base64UrlDecoderForLive;
- (id)base64UrlDecoder;
- (id)base64UrlEncoder;
- (id)URLStringByAppendingQueryString:(id)arg1;
- (id)getLimitLogString;
- (id)mutableStringByEscapingWeChatEmoticonsWithAttachmentCharacterAndExtractNotations:(id *)arg1;
- (id)safeSubstringCountingWeChatEmoticonsAsOneToCharacterIndex:(unsigned long long)arg1;
- (long long)numberOfCharactersCountingWeChatEmoticonsAsOne;
- (id)stringByEscapingWeChatEmoticonsWithAttachmentCharacterAndExtractNotations:(id *)arg1;
- (struct _NSRange)paragraphRangeAtIndex:(unsigned long long)arg1;
- (_Bool)isEndOfParagraphAtIndex:(unsigned long long)arg1;
- (unsigned long long)numOfParagraph;
- (void)searchWithKeyWord:(id)arg1 UsingBlock:(CDUnknownBlockType)arg2;
- (id)attributedStringWithStyle:(id)arg1;
- (id)attributedStringWithStyle:(id)arg1 range:(struct _NSRange)arg2;
- (unsigned int)nearbyExperimentValue;
- (id)separatedNumberAccessibilityLabel;
- (id)stringByFormattingMoneyNumberWithPattern:(id)arg1;
- (id)currencyAccessibilityLabel;
- (_Bool)noUseOfflinePkg;
- (id)getUrlDomain;
- (id)getPkgId;
- (id)findWordsFromStartTag:(id)arg1 endTag:(id)arg2;
- (_Bool)isContentDifferentTo:(id)arg1;
- (_Bool)isNilOrEmpty;
- (id)trimRevertChar;
- (id)CCO_hash;
- (id)onPromoteBubbleActionExtraInfo;
- (id)replaceIdWithNameWithNameLengthLimit:(unsigned long long)arg1;
- (id)replaceIdWithName;
- (id)stringByCorrectingWCRMLogFormat;
- (id)URLEncodedString;
- (id)sqliteString;
- (id)formatChinaPhoneString:(id)arg1;
- (_Bool)isEmailAddress;
- (_Bool)isCurrectPhoneNum;
- (_Bool)isNumericStr;
- (id)XXXString;
- (_Bool)checkIsLegalMobile:(unsigned short *)arg1 bufLen:(int)arg2;
- (id)getTelPhoneNumbersWithComma;
- (id)GetTelPhoneNumber;
- (id)MD5Data;
- (id)MD5String;
- (unsigned int)uInt32Value;
- (unsigned long long)uInt64Value;
- (id)diffIdentifier;
- (id)safeSubstringToCharacterIndex:(long long)arg1;
- (id)substringToCharacterIndex:(long long)arg1;
- (struct _NSRange)utf16UnitsRangeForCharacterContainingUtf16UnitIndex:(long long)arg1;
- (long long)characterIndexWithUtf16UnitIndex:(long long)arg1;
- (struct _NSRange)utf16UnitsRangeForCharacterAtIndex:(long long)arg1;
- (id)trimToFullWidthWeightedLength:(unsigned long long)arg1;
- (unsigned long long)fullWidthWeightedLength;
- (_Bool)containsFullWidthCharacters;
- (_Bool)containsCjkScript;
- (_Bool)isAllIdeographicOrRadical;
- (_Bool)isAllEmoji;
- (_Bool)containsEmoji;
- (long long)numberOfCharacters;
- (id)JSONDictionary;
- (id)JSONValue;
- (_Bool)equalsIgnoreCase:(id)arg1;
- (const char *)utf8CString;
- (basic_string_0ec669f3)utf8StdString;
- (unsigned int)u32Value;
- (basic_string_0ec669f3)sc_stdString;
- (id)sc_firstUppercased;
- (id)sc_substringBeforeLast:(id)arg1;
- (id)sc_substringAfterLast:(id)arg1;
- (id)sc_substringBeforeFirst:(id)arg1;
- (id)sc_substringAfterFirst:(id)arg1;
@property(readonly, nonatomic) NSString *sc_md5;
- (id)MBJSONDictionary;
- (id)MBJSONValue;
- (id)toMBJSObject:(id)arg1;
- (id)wcdb_stringByStandardizingPath;
- (id)numberValue;
- (id)stringValue;
- (id)dataValue;
- (id)archivedWCTValue;
- (id)getWALimitLogString;
- (id)stringByReplacingSpecialCharactor;
- (id)stringByReplacingMatchesFromRegularExpression:(id)arg1 replacementBlock:(CDUnknownBlockType)arg2;
- (id)validJSONString;
- (id)MD5;
- (id)wa_formatChinaPhoneString:(id)arg1;
- (_Bool)containsRegex:(id)arg1;
- (_Bool)containsAppStoreLinkString;
- (id)scheme;
- (id)stringByTruncatingToWidth:(double)arg1 withFont:(id)arg2;
- (id)stringByTruncatingAtString:(id)arg1 toWidth:(double)arg2 withFont:(id)arg3;
- (id)stringByOmitPrefixAndSuffix:(id)arg1;
- (id)stringByOmitSuffix:(id)arg1;
- (id)stringByReplacingJavaScriptUnsupportString:(_Bool)arg1;
- (id)stringByReplacingJavaScriptUnsupportString;
- (id)stringByOmitPrefix:(id)arg1;
- (unsigned long long)characterLengthOfComposedCharacter;
- (id)stringWithMaxLength:(unsigned long long)arg1;
- (_Bool)isGlyphSupported;
- (id)getEmojiImage:(struct CGSize)arg1;
- (id)getComposedEmojiStrs;
- (_Bool)isContainComposedEmojiWithLooseCheck;
- (unsigned long long)emojiCharCount;
- (id)emojiUnifiedString;
- (id)stringByUrlEncoded;
- (id)removeLastEmoticon;
- (id)insertIntoEmoticonStrWith:(id)arg1 inRange:(struct _NSRange)arg2;
- (id)getEmoticonRanges;
- (id)getEmoticonStrs;
- (_Bool)isContainEmoticon;
- (id)getNumberString;
- (id)removeSpaceAndNewline;
- (id)urlStringByAppendQueryString:(id)arg1;
- (id)urlStringByAppendQueryArray:(id)arg1;
- (id)urlStringByAppendQueryDictionary:(id)arg1;
- (id)urlQueryParamDict;
- (_Bool)hasChinese;
- (_Bool)isChinese;
- (_Bool)isNumber;
- (id)lastCharacter;
- (id)firstCharacter;
- (id)characterStringAtIndex:(unsigned long long)arg1;
- (id)stringByTrimmingWhitespace;
- (id)stringByReplacingHTMLEntities;
- (id)stringByAddingHTMLEntities;
- (_Bool)hasSuffixCharacterFromSet:(id)arg1;
- (_Bool)hasPrefixCharacterFromSet:(id)arg1;
- (float)percentValue;
- (_Bool)isNumeric;
- (unsigned long long)integerValueFromHex;
- (id)removeLastComposedEmoji:(id)arg1;
- (id)prefixForLength:(unsigned long long)arg1 WithEmoOneCharPolicy:(_Bool)arg2;
- (unsigned long long)getEmojiFixedLengthOffset;
- (unsigned long long)getEmoticonFixedLengthOffset;
- (id)filterNewLineCharacter;
- (id)prefixWithLength:(unsigned long long)arg1;
- (unsigned long long)charLengthWithEmojiFullLength;
- (unsigned long long)getCharacterWithEmoji;
- (unsigned long long)getIndexWithMaxCharCount:(unsigned long long)arg1 withEmojiFullLength:(_Bool)arg2;
- (unsigned long long)getIndexWithMaxCharCount:(unsigned long long)arg1;
- (unsigned long long)charLengthWithEmoOneCharPolicy:(_Bool)arg1 andIsFullWidth:(_Bool)arg2;
- (unsigned long long)charLength;
- (struct CGRect)mm_fastBoundingRectWithSize:(struct CGSize)arg1 options:(long long)arg2 attributes:(id)arg3 context:(id)arg4;
- (_Bool)mm_checkBoundingSize:(struct CGSize)arg1 options:(long long)arg2 attributes:(id)arg3 context:(id)arg4;
- (_Bool)mm_fastIsValidAttrbutes:(id)arg1;
- (struct CGSize)mm_fastSizeWithAttributes:(id)arg1;
- (struct CGSize)mm_fastSizeWithFont:(id)arg1;
- (double)fontSizeFittingWidth:(double)arg1 maxLineNumber:(long long)arg2 maxHeight:(double)arg3 lineBreakMode:(long long)arg4 defaultFontSize:(double)arg5 minFontSize:(double)arg6;
- (double)fontSizeFittingWidth:(double)arg1 maxHeight:(double)arg2 lineBreakMode:(long long)arg3 defaultFontSize:(double)arg4 minFontSize:(double)arg5;
- (double)fontSizeFittingWidth:(double)arg1 maxLineNumber:(long long)arg2 lineBreakMode:(long long)arg3 defaultFontSize:(double)arg4 minFontSize:(double)arg5;
- (id)actualFont:(id)arg1 forWidth:(double)arg2;
- (id)prefixWithFont:(id)arg1 inWidth:(double)arg2;
- (struct CGSize)stringSizeWithFont:(id)arg1 constrainedToSize:(struct CGSize)arg2 lineBreakMode:(long long)arg3 lineSpacing:(double)arg4 alignment:(long long)arg5;
- (struct CGSize)stringSizeWithFont:(id)arg1 constrainedToSize:(struct CGSize)arg2 lineBreakMode:(long long)arg3 alignment:(long long)arg4;
- (struct CGSize)stringSizeWithFont:(id)arg1 constrainedToSize:(struct CGSize)arg2 lineBreakMode:(long long)arg3 lineSpacing:(double)arg4;
- (struct CGSize)stringSizeWithFont:(id)arg1 constrainedToSize:(struct CGSize)arg2 lineBreakMode:(long long)arg3;
- (struct CGSize)stringSizeWithFont:(id)arg1 forWidth:(double)arg2 lineBreakMode:(long long)arg3;
- (struct CGSize)stringSizeWithFont:(id)arg1 constrainedToSize:(struct CGSize)arg2;
- (struct CGSize)stringSizeWithFont:(id)arg1;
- (void)qb_setInAttributes:(id)arg1 withName:(id)arg2;
- (_Bool)isEqualToString:(id)arg1 caseInsensitive:(_Bool)arg2;
- (_Bool)qbContainsString:(id)arg1 caseInsensitive:(_Bool)arg2;
- (id)nonEmptyOrNil;
- (id)safeStringByReplacingCharactersInRange:(struct _NSRange)arg1 withString:(id)arg2;
- (id)gtm_stringByEncodeByJsonAndUrlEncode;
- (id)gtm_stringByUnescapingFromURLArgument;
- (id)gtm_stringByEscapingForURLArgumentOnly;
- (id)gtm_stringByEscapingForURLArgument;
- (id)stringByReplacingOccurrencesOfRegex:(id)arg1 options:(unsigned int)arg2 inRange:(struct _NSRange)arg3 error:(id *)arg4 enumerationOptions:(unsigned long long)arg5 usingBlock:(CDUnknownBlockType)arg6;
- (id)stringByReplacingOccurrencesOfRegex:(id)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (_Bool)enumerateStringsSeparatedByRegex:(id)arg1 options:(unsigned int)arg2 inRange:(struct _NSRange)arg3 error:(id *)arg4 enumerationOptions:(unsigned long long)arg5 usingBlock:(CDUnknownBlockType)arg6;
- (_Bool)enumerateStringsSeparatedByRegex:(id)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (_Bool)enumerateStringsMatchedByRegex:(id)arg1 options:(unsigned int)arg2 inRange:(struct _NSRange)arg3 error:(id *)arg4 enumerationOptions:(unsigned long long)arg5 usingBlock:(CDUnknownBlockType)arg6;
- (_Bool)enumerateStringsMatchedByRegex:(id)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (id)arrayOfDictionariesByMatchingRegex:(id)arg1 options:(unsigned int)arg2 range:(struct _NSRange)arg3 error:(id *)arg4 withKeys:(id *)arg5 forCaptures:(int *)arg6 count:(unsigned long long)arg7;
- (id)arrayOfDictionariesByMatchingRegex:(id)arg1 options:(unsigned int)arg2 range:(struct _NSRange)arg3 error:(id *)arg4 withFirstKey:(id)arg5 arguments:(char *)arg6;
- (id)arrayOfDictionariesByMatchingRegex:(id)arg1 options:(unsigned int)arg2 range:(struct _NSRange)arg3 error:(id *)arg4 withKeysAndCaptures:(id)arg5;
- (id)arrayOfDictionariesByMatchingRegex:(id)arg1 range:(struct _NSRange)arg2 withKeysAndCaptures:(id)arg3;
- (id)arrayOfDictionariesByMatchingRegex:(id)arg1 withKeysAndCaptures:(id)arg2;
- (id)dictionaryByMatchingRegex:(id)arg1 options:(unsigned int)arg2 range:(struct _NSRange)arg3 error:(id *)arg4 withKeys:(id *)arg5 forCaptures:(int *)arg6 count:(unsigned long long)arg7;
- (id)dictionaryByMatchingRegex:(id)arg1 options:(unsigned int)arg2 range:(struct _NSRange)arg3 error:(id *)arg4 withFirstKey:(id)arg5 arguments:(char *)arg6;
- (id)dictionaryByMatchingRegex:(id)arg1 options:(unsigned int)arg2 range:(struct _NSRange)arg3 error:(id *)arg4 withKeysAndCaptures:(id)arg5;
- (id)dictionaryByMatchingRegex:(id)arg1 range:(struct _NSRange)arg2 withKeysAndCaptures:(id)arg3;
- (id)dictionaryByMatchingRegex:(id)arg1 withKeysAndCaptures:(id)arg2;
- (id)arrayOfCaptureComponentsMatchedByRegex:(id)arg1 options:(unsigned int)arg2 range:(struct _NSRange)arg3 error:(id *)arg4;
- (id)arrayOfCaptureComponentsMatchedByRegex:(id)arg1 range:(struct _NSRange)arg2;
- (id)arrayOfCaptureComponentsMatchedByRegex:(id)arg1;
- (id)captureComponentsMatchedByRegex:(id)arg1 options:(unsigned int)arg2 range:(struct _NSRange)arg3 error:(id *)arg4;
- (id)captureComponentsMatchedByRegex:(id)arg1 range:(struct _NSRange)arg2;
- (id)captureComponentsMatchedByRegex:(id)arg1;
- (id)componentsMatchedByRegex:(id)arg1 options:(unsigned int)arg2 range:(struct _NSRange)arg3 capture:(long long)arg4 error:(id *)arg5;
- (id)componentsMatchedByRegex:(id)arg1 range:(struct _NSRange)arg2;
- (id)componentsMatchedByRegex:(id)arg1 capture:(long long)arg2;
- (id)componentsMatchedByRegex:(id)arg1;
- (id)stringByReplacingOccurrencesOfRegex:(id)arg1 withString:(id)arg2 options:(unsigned int)arg3 range:(struct _NSRange)arg4 error:(id *)arg5;
- (id)stringByReplacingOccurrencesOfRegex:(id)arg1 withString:(id)arg2 range:(struct _NSRange)arg3;
- (id)stringByReplacingOccurrencesOfRegex:(id)arg1 withString:(id)arg2;
- (id)stringByMatching:(id)arg1 options:(unsigned int)arg2 inRange:(struct _NSRange)arg3 capture:(long long)arg4 error:(id *)arg5;
- (id)stringByMatching:(id)arg1 inRange:(struct _NSRange)arg2;
- (id)stringByMatching:(id)arg1 capture:(long long)arg2;
- (id)stringByMatching:(id)arg1;
- (struct _NSRange)rangeOfRegex:(id)arg1 options:(unsigned int)arg2 inRange:(struct _NSRange)arg3 capture:(long long)arg4 error:(id *)arg5;
- (struct _NSRange)rangeOfRegex:(id)arg1 inRange:(struct _NSRange)arg2;
- (struct _NSRange)rangeOfRegex:(id)arg1 capture:(long long)arg2;
- (struct _NSRange)rangeOfRegex:(id)arg1;
- (void)flushCachedRegexData;
- (_Bool)isRegexValidWithOptions:(unsigned int)arg1 error:(id *)arg2;
- (_Bool)isRegexValid;
- (_Bool)isMatchedByRegex:(id)arg1 options:(unsigned int)arg2 inRange:(struct _NSRange)arg3 error:(id *)arg4;
- (_Bool)isMatchedByRegex:(id)arg1 inRange:(struct _NSRange)arg2;
- (_Bool)isMatchedByRegex:(id)arg1;
- (id)componentsSeparatedByRegex:(id)arg1 options:(unsigned int)arg2 range:(struct _NSRange)arg3 error:(id *)arg4;
- (id)componentsSeparatedByRegex:(id)arg1 range:(struct _NSRange)arg2;
- (id)componentsSeparatedByRegex:(id)arg1;
- (long long)captureCountWithOptions:(unsigned int)arg1 error:(id *)arg2;
- (long long)captureCount;
- (id)stringByTrimingContinueCharactersInSet:(id)arg1;
- (id)stringByReplacingCharactersInSet:(id)arg1 withString:(id)arg2;
- (id)safeSubstringWithRange:(struct _NSRange)arg1;
- (id)safeSubstringToIndex:(long long)arg1;
- (id)safeSubstringFromIndex:(long long)arg1;
- (id)replacingWithPattern:(id)arg1 withTemplate:(id)arg2 error:(id *)arg3;
- (_Bool)containsSubstring:(id)arg1 option:(unsigned long long)arg2;
- (_Bool)containsSubstring:(id)arg1;
- (long long)compareWithUInt64:(id)arg1;
- (id)stringByEscapingAllLineBreak;
- (id)stringByTrimmingRight;
- (id)stringByTrimmingLeft;
- (id)stringByTrimming;
- (id)stringByTrimmingTrailingCharactersInSet:(id)arg1;
- (id)stringByTrimmingLeadingCharactersInSet:(id)arg1;
- (_Bool)hasCaseInsensitivePrefix:(id)arg1 subString:(id *)arg2;
- (_Bool)isCaseInsensitiveEqualToString:(id)arg1;
- (unsigned long long)uint64Value;
- (unsigned long long)unsignLongLongValue;
- (id)JSONDictionary;
- (id)JSONArray;
- (id)JSONValue;
- (id)gtm_stringByUnescapingFromHTML;
- (id)gtm_stringByEscapingForXML;
- (id)gtm_stringByEscapingForHTML;
- (id)gtm_stringByEscapingHTMLUsingTable:(CDStruct_6a59ab51 *)arg1 ofSize:(unsigned long long)arg2 escapingUnicode:(_Bool)arg3;
- (SEL)ext_toSelector;
- (id)convertCamelFromUnderline;
- (id)convertUnderlineFromCamel;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;
@end

